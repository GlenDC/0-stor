// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proxy.proto

/*
Package proxy is a generated protocol buffer package.

It is generated from these files:
	proxy.proto

It has these top-level messages:
	Permission
	CreateJWTRequest
	CreateJWTReply
	NamespaceRequest
	NamespaceReply
	EditPermissionRequest
	EditPermissionReply
	GetPermissionRequest
	GetPermissionReply
	Chunk
	Meta
	WriteRequest
	WriteReply
	WriteFileRequest
	WriteFileReply
	WriteStreamRequest
	WriteStreamReply
	ReadRequest
	ReadReply
	ReadFileRequest
	ReadFileReply
	DeleteRequest
	WalkRequest
	WalkReply
	ReferenceListRequest
	NullReply
	CheckRequest
	CheckReply
	RepairRequest
*/
package proxy

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CheckReply_Status int32

const (
	CheckReply_ok        CheckReply_Status = 0
	CheckReply_corrupted CheckReply_Status = 1
	CheckReply_missing   CheckReply_Status = 2
)

var CheckReply_Status_name = map[int32]string{
	0: "ok",
	1: "corrupted",
	2: "missing",
}
var CheckReply_Status_value = map[string]int32{
	"ok":        0,
	"corrupted": 1,
	"missing":   2,
}

func (x CheckReply_Status) String() string {
	return proto.EnumName(CheckReply_Status_name, int32(x))
}
func (CheckReply_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{27, 0} }

// IYO permission
type Permission struct {
	Write  bool `protobuf:"varint,1,opt,name=write" json:"write,omitempty"`
	Read   bool `protobuf:"varint,2,opt,name=read" json:"read,omitempty"`
	Delete bool `protobuf:"varint,3,opt,name=delete" json:"delete,omitempty"`
	Admin  bool `protobuf:"varint,4,opt,name=admin" json:"admin,omitempty"`
}

func (m *Permission) Reset()                    { *m = Permission{} }
func (m *Permission) String() string            { return proto.CompactTextString(m) }
func (*Permission) ProtoMessage()               {}
func (*Permission) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Permission) GetWrite() bool {
	if m != nil {
		return m.Write
	}
	return false
}

func (m *Permission) GetRead() bool {
	if m != nil {
		return m.Read
	}
	return false
}

func (m *Permission) GetDelete() bool {
	if m != nil {
		return m.Delete
	}
	return false
}

func (m *Permission) GetAdmin() bool {
	if m != nil {
		return m.Admin
	}
	return false
}

type CreateJWTRequest struct {
	Namespace  string      `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Permission *Permission `protobuf:"bytes,2,opt,name=permission" json:"permission,omitempty"`
}

func (m *CreateJWTRequest) Reset()                    { *m = CreateJWTRequest{} }
func (m *CreateJWTRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateJWTRequest) ProtoMessage()               {}
func (*CreateJWTRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateJWTRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CreateJWTRequest) GetPermission() *Permission {
	if m != nil {
		return m.Permission
	}
	return nil
}

type CreateJWTReply struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *CreateJWTReply) Reset()                    { *m = CreateJWTReply{} }
func (m *CreateJWTReply) String() string            { return proto.CompactTextString(m) }
func (*CreateJWTReply) ProtoMessage()               {}
func (*CreateJWTReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateJWTReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type NamespaceRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *NamespaceRequest) Reset()                    { *m = NamespaceRequest{} }
func (m *NamespaceRequest) String() string            { return proto.CompactTextString(m) }
func (*NamespaceRequest) ProtoMessage()               {}
func (*NamespaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NamespaceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type NamespaceReply struct {
}

func (m *NamespaceReply) Reset()                    { *m = NamespaceReply{} }
func (m *NamespaceReply) String() string            { return proto.CompactTextString(m) }
func (*NamespaceReply) ProtoMessage()               {}
func (*NamespaceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type EditPermissionRequest struct {
	Namespace  string      `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	UserID     string      `protobuf:"bytes,2,opt,name=userID" json:"userID,omitempty"`
	Permission *Permission `protobuf:"bytes,3,opt,name=permission" json:"permission,omitempty"`
}

func (m *EditPermissionRequest) Reset()                    { *m = EditPermissionRequest{} }
func (m *EditPermissionRequest) String() string            { return proto.CompactTextString(m) }
func (*EditPermissionRequest) ProtoMessage()               {}
func (*EditPermissionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *EditPermissionRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *EditPermissionRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *EditPermissionRequest) GetPermission() *Permission {
	if m != nil {
		return m.Permission
	}
	return nil
}

type EditPermissionReply struct {
}

func (m *EditPermissionReply) Reset()                    { *m = EditPermissionReply{} }
func (m *EditPermissionReply) String() string            { return proto.CompactTextString(m) }
func (*EditPermissionReply) ProtoMessage()               {}
func (*EditPermissionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type GetPermissionRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	UserID    string `protobuf:"bytes,2,opt,name=userID" json:"userID,omitempty"`
}

func (m *GetPermissionRequest) Reset()                    { *m = GetPermissionRequest{} }
func (m *GetPermissionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPermissionRequest) ProtoMessage()               {}
func (*GetPermissionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetPermissionRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetPermissionRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type GetPermissionReply struct {
	Permission *Permission `protobuf:"bytes,1,opt,name=permission" json:"permission,omitempty"`
}

func (m *GetPermissionReply) Reset()                    { *m = GetPermissionReply{} }
func (m *GetPermissionReply) String() string            { return proto.CompactTextString(m) }
func (*GetPermissionReply) ProtoMessage()               {}
func (*GetPermissionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetPermissionReply) GetPermission() *Permission {
	if m != nil {
		return m.Permission
	}
	return nil
}

type Chunk struct {
	Size   uint64   `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
	Key    []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Shards []string `protobuf:"bytes,3,rep,name=shards" json:"shards,omitempty"`
}

func (m *Chunk) Reset()                    { *m = Chunk{} }
func (m *Chunk) String() string            { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()               {}
func (*Chunk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Chunk) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Chunk) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Chunk) GetShards() []string {
	if m != nil {
		return m.Shards
	}
	return nil
}

type Meta struct {
	Epoch     int64    `protobuf:"varint,1,opt,name=epoch" json:"epoch,omitempty"`
	Key       []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	EncrKey   []byte   `protobuf:"bytes,3,opt,name=encrKey,proto3" json:"encrKey,omitempty"`
	Chunks    []*Chunk `protobuf:"bytes,4,rep,name=chunks" json:"chunks,omitempty"`
	Previous  []byte   `protobuf:"bytes,5,opt,name=previous,proto3" json:"previous,omitempty"`
	Next      []byte   `protobuf:"bytes,6,opt,name=next,proto3" json:"next,omitempty"`
	ConfigPtr []byte   `protobuf:"bytes,7,opt,name=configPtr,proto3" json:"configPtr,omitempty"`
}

func (m *Meta) Reset()                    { *m = Meta{} }
func (m *Meta) String() string            { return proto.CompactTextString(m) }
func (*Meta) ProtoMessage()               {}
func (*Meta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Meta) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Meta) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Meta) GetEncrKey() []byte {
	if m != nil {
		return m.EncrKey
	}
	return nil
}

func (m *Meta) GetChunks() []*Chunk {
	if m != nil {
		return m.Chunks
	}
	return nil
}

func (m *Meta) GetPrevious() []byte {
	if m != nil {
		return m.Previous
	}
	return nil
}

func (m *Meta) GetNext() []byte {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *Meta) GetConfigPtr() []byte {
	if m != nil {
		return m.ConfigPtr
	}
	return nil
}

type WriteRequest struct {
	Key           []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Meta          *Meta    `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	Value         []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	ReferenceList []string `protobuf:"bytes,4,rep,name=referenceList" json:"referenceList,omitempty"`
	PrevKey       string   `protobuf:"bytes,5,opt,name=prevKey" json:"prevKey,omitempty"`
	PrevMeta      *Meta    `protobuf:"bytes,6,opt,name=prevMeta" json:"prevMeta,omitempty"`
}

func (m *WriteRequest) Reset()                    { *m = WriteRequest{} }
func (m *WriteRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()               {}
func (*WriteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *WriteRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *WriteRequest) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *WriteRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *WriteRequest) GetReferenceList() []string {
	if m != nil {
		return m.ReferenceList
	}
	return nil
}

func (m *WriteRequest) GetPrevKey() string {
	if m != nil {
		return m.PrevKey
	}
	return ""
}

func (m *WriteRequest) GetPrevMeta() *Meta {
	if m != nil {
		return m.PrevMeta
	}
	return nil
}

type WriteReply struct {
	Meta *Meta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
}

func (m *WriteReply) Reset()                    { *m = WriteReply{} }
func (m *WriteReply) String() string            { return proto.CompactTextString(m) }
func (*WriteReply) ProtoMessage()               {}
func (*WriteReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *WriteReply) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type WriteFileRequest struct {
	Key           []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Meta          *Meta    `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	FilePath      string   `protobuf:"bytes,3,opt,name=filePath" json:"filePath,omitempty"`
	ReferenceList []string `protobuf:"bytes,4,rep,name=referenceList" json:"referenceList,omitempty"`
	PrevKey       string   `protobuf:"bytes,5,opt,name=prevKey" json:"prevKey,omitempty"`
	PrevMeta      *Meta    `protobuf:"bytes,6,opt,name=prevMeta" json:"prevMeta,omitempty"`
}

func (m *WriteFileRequest) Reset()                    { *m = WriteFileRequest{} }
func (m *WriteFileRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteFileRequest) ProtoMessage()               {}
func (*WriteFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *WriteFileRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *WriteFileRequest) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *WriteFileRequest) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *WriteFileRequest) GetReferenceList() []string {
	if m != nil {
		return m.ReferenceList
	}
	return nil
}

func (m *WriteFileRequest) GetPrevKey() string {
	if m != nil {
		return m.PrevKey
	}
	return ""
}

func (m *WriteFileRequest) GetPrevMeta() *Meta {
	if m != nil {
		return m.PrevMeta
	}
	return nil
}

type WriteFileReply struct {
	Meta *Meta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
}

func (m *WriteFileReply) Reset()                    { *m = WriteFileReply{} }
func (m *WriteFileReply) String() string            { return proto.CompactTextString(m) }
func (*WriteFileReply) ProtoMessage()               {}
func (*WriteFileReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *WriteFileReply) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type WriteStreamRequest struct {
	Key           []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Meta          *Meta    `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	Value         []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	ReferenceList []string `protobuf:"bytes,4,rep,name=referenceList" json:"referenceList,omitempty"`
	PrevKey       []byte   `protobuf:"bytes,5,opt,name=prevKey,proto3" json:"prevKey,omitempty"`
	PrevMeta      *Meta    `protobuf:"bytes,6,opt,name=prevMeta" json:"prevMeta,omitempty"`
}

func (m *WriteStreamRequest) Reset()                    { *m = WriteStreamRequest{} }
func (m *WriteStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteStreamRequest) ProtoMessage()               {}
func (*WriteStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *WriteStreamRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *WriteStreamRequest) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *WriteStreamRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *WriteStreamRequest) GetReferenceList() []string {
	if m != nil {
		return m.ReferenceList
	}
	return nil
}

func (m *WriteStreamRequest) GetPrevKey() []byte {
	if m != nil {
		return m.PrevKey
	}
	return nil
}

func (m *WriteStreamRequest) GetPrevMeta() *Meta {
	if m != nil {
		return m.PrevMeta
	}
	return nil
}

type WriteStreamReply struct {
	Meta *Meta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
}

func (m *WriteStreamReply) Reset()                    { *m = WriteStreamReply{} }
func (m *WriteStreamReply) String() string            { return proto.CompactTextString(m) }
func (*WriteStreamReply) ProtoMessage()               {}
func (*WriteStreamReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *WriteStreamReply) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type ReadRequest struct {
	Key  []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Meta *Meta  `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ReadRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ReadRequest) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type ReadReply struct {
	Value         []byte   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	ReferenceList []string `protobuf:"bytes,2,rep,name=referenceList" json:"referenceList,omitempty"`
}

func (m *ReadReply) Reset()                    { *m = ReadReply{} }
func (m *ReadReply) String() string            { return proto.CompactTextString(m) }
func (*ReadReply) ProtoMessage()               {}
func (*ReadReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ReadReply) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ReadReply) GetReferenceList() []string {
	if m != nil {
		return m.ReferenceList
	}
	return nil
}

type ReadFileRequest struct {
	Key      []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Meta     *Meta  `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	FilePath string `protobuf:"bytes,3,opt,name=filePath" json:"filePath,omitempty"`
}

func (m *ReadFileRequest) Reset()                    { *m = ReadFileRequest{} }
func (m *ReadFileRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadFileRequest) ProtoMessage()               {}
func (*ReadFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ReadFileRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ReadFileRequest) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ReadFileRequest) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

type ReadFileReply struct {
	ReferenceList []string `protobuf:"bytes,1,rep,name=referenceList" json:"referenceList,omitempty"`
}

func (m *ReadFileReply) Reset()                    { *m = ReadFileReply{} }
func (m *ReadFileReply) String() string            { return proto.CompactTextString(m) }
func (*ReadFileReply) ProtoMessage()               {}
func (*ReadFileReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ReadFileReply) GetReferenceList() []string {
	if m != nil {
		return m.ReferenceList
	}
	return nil
}

type DeleteRequest struct {
	Key  []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Meta *Meta  `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *DeleteRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DeleteRequest) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type WalkRequest struct {
	StartKey  []byte `protobuf:"bytes,1,opt,name=startKey,proto3" json:"startKey,omitempty"`
	FromEpoch int64  `protobuf:"varint,2,opt,name=fromEpoch" json:"fromEpoch,omitempty"`
	ToEpoch   int64  `protobuf:"varint,3,opt,name=toEpoch" json:"toEpoch,omitempty"`
}

func (m *WalkRequest) Reset()                    { *m = WalkRequest{} }
func (m *WalkRequest) String() string            { return proto.CompactTextString(m) }
func (*WalkRequest) ProtoMessage()               {}
func (*WalkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *WalkRequest) GetStartKey() []byte {
	if m != nil {
		return m.StartKey
	}
	return nil
}

func (m *WalkRequest) GetFromEpoch() int64 {
	if m != nil {
		return m.FromEpoch
	}
	return 0
}

func (m *WalkRequest) GetToEpoch() int64 {
	if m != nil {
		return m.ToEpoch
	}
	return 0
}

type WalkReply struct {
	Key           []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Meta          *Meta    `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	Value         []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	ReferenceList []string `protobuf:"bytes,4,rep,name=referenceList" json:"referenceList,omitempty"`
}

func (m *WalkReply) Reset()                    { *m = WalkReply{} }
func (m *WalkReply) String() string            { return proto.CompactTextString(m) }
func (*WalkReply) ProtoMessage()               {}
func (*WalkReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *WalkReply) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *WalkReply) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *WalkReply) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *WalkReply) GetReferenceList() []string {
	if m != nil {
		return m.ReferenceList
	}
	return nil
}

type ReferenceListRequest struct {
	Key           []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Meta          *Meta    `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	ReferenceList []string `protobuf:"bytes,3,rep,name=referenceList" json:"referenceList,omitempty"`
}

func (m *ReferenceListRequest) Reset()                    { *m = ReferenceListRequest{} }
func (m *ReferenceListRequest) String() string            { return proto.CompactTextString(m) }
func (*ReferenceListRequest) ProtoMessage()               {}
func (*ReferenceListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ReferenceListRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ReferenceListRequest) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ReferenceListRequest) GetReferenceList() []string {
	if m != nil {
		return m.ReferenceList
	}
	return nil
}

type NullReply struct {
}

func (m *NullReply) Reset()                    { *m = NullReply{} }
func (m *NullReply) String() string            { return proto.CompactTextString(m) }
func (*NullReply) ProtoMessage()               {}
func (*NullReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

type CheckRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *CheckRequest) Reset()                    { *m = CheckRequest{} }
func (m *CheckRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckRequest) ProtoMessage()               {}
func (*CheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *CheckRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type CheckReply struct {
	Status CheckReply_Status `protobuf:"varint,1,opt,name=status,enum=proxy.CheckReply_Status" json:"status,omitempty"`
}

func (m *CheckReply) Reset()                    { *m = CheckReply{} }
func (m *CheckReply) String() string            { return proto.CompactTextString(m) }
func (*CheckReply) ProtoMessage()               {}
func (*CheckReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *CheckReply) GetStatus() CheckReply_Status {
	if m != nil {
		return m.Status
	}
	return CheckReply_ok
}

type RepairRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *RepairRequest) Reset()                    { *m = RepairRequest{} }
func (m *RepairRequest) String() string            { return proto.CompactTextString(m) }
func (*RepairRequest) ProtoMessage()               {}
func (*RepairRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *RepairRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func init() {
	proto.RegisterType((*Permission)(nil), "proxy.Permission")
	proto.RegisterType((*CreateJWTRequest)(nil), "proxy.CreateJWTRequest")
	proto.RegisterType((*CreateJWTReply)(nil), "proxy.CreateJWTReply")
	proto.RegisterType((*NamespaceRequest)(nil), "proxy.NamespaceRequest")
	proto.RegisterType((*NamespaceReply)(nil), "proxy.NamespaceReply")
	proto.RegisterType((*EditPermissionRequest)(nil), "proxy.EditPermissionRequest")
	proto.RegisterType((*EditPermissionReply)(nil), "proxy.EditPermissionReply")
	proto.RegisterType((*GetPermissionRequest)(nil), "proxy.GetPermissionRequest")
	proto.RegisterType((*GetPermissionReply)(nil), "proxy.GetPermissionReply")
	proto.RegisterType((*Chunk)(nil), "proxy.Chunk")
	proto.RegisterType((*Meta)(nil), "proxy.Meta")
	proto.RegisterType((*WriteRequest)(nil), "proxy.WriteRequest")
	proto.RegisterType((*WriteReply)(nil), "proxy.WriteReply")
	proto.RegisterType((*WriteFileRequest)(nil), "proxy.WriteFileRequest")
	proto.RegisterType((*WriteFileReply)(nil), "proxy.WriteFileReply")
	proto.RegisterType((*WriteStreamRequest)(nil), "proxy.WriteStreamRequest")
	proto.RegisterType((*WriteStreamReply)(nil), "proxy.WriteStreamReply")
	proto.RegisterType((*ReadRequest)(nil), "proxy.ReadRequest")
	proto.RegisterType((*ReadReply)(nil), "proxy.ReadReply")
	proto.RegisterType((*ReadFileRequest)(nil), "proxy.ReadFileRequest")
	proto.RegisterType((*ReadFileReply)(nil), "proxy.ReadFileReply")
	proto.RegisterType((*DeleteRequest)(nil), "proxy.DeleteRequest")
	proto.RegisterType((*WalkRequest)(nil), "proxy.WalkRequest")
	proto.RegisterType((*WalkReply)(nil), "proxy.WalkReply")
	proto.RegisterType((*ReferenceListRequest)(nil), "proxy.ReferenceListRequest")
	proto.RegisterType((*NullReply)(nil), "proxy.NullReply")
	proto.RegisterType((*CheckRequest)(nil), "proxy.CheckRequest")
	proto.RegisterType((*CheckReply)(nil), "proxy.CheckReply")
	proto.RegisterType((*RepairRequest)(nil), "proxy.RepairRequest")
	proto.RegisterEnum("proxy.CheckReply_Status", CheckReply_Status_name, CheckReply_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NamespaceService service

type NamespaceServiceClient interface {
	CreateJWT(ctx context.Context, in *CreateJWTRequest, opts ...grpc.CallOption) (*CreateJWTReply, error)
	CreateNamespace(ctx context.Context, in *NamespaceRequest, opts ...grpc.CallOption) (*NamespaceReply, error)
	DeleteNamespace(ctx context.Context, in *NamespaceRequest, opts ...grpc.CallOption) (*NamespaceReply, error)
	GivePermission(ctx context.Context, in *EditPermissionRequest, opts ...grpc.CallOption) (*EditPermissionReply, error)
	RemovePermission(ctx context.Context, in *EditPermissionRequest, opts ...grpc.CallOption) (*EditPermissionReply, error)
	GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionReply, error)
}

type namespaceServiceClient struct {
	cc *grpc.ClientConn
}

func NewNamespaceServiceClient(cc *grpc.ClientConn) NamespaceServiceClient {
	return &namespaceServiceClient{cc}
}

func (c *namespaceServiceClient) CreateJWT(ctx context.Context, in *CreateJWTRequest, opts ...grpc.CallOption) (*CreateJWTReply, error) {
	out := new(CreateJWTReply)
	err := grpc.Invoke(ctx, "/proxy.NamespaceService/CreateJWT", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) CreateNamespace(ctx context.Context, in *NamespaceRequest, opts ...grpc.CallOption) (*NamespaceReply, error) {
	out := new(NamespaceReply)
	err := grpc.Invoke(ctx, "/proxy.NamespaceService/CreateNamespace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) DeleteNamespace(ctx context.Context, in *NamespaceRequest, opts ...grpc.CallOption) (*NamespaceReply, error) {
	out := new(NamespaceReply)
	err := grpc.Invoke(ctx, "/proxy.NamespaceService/DeleteNamespace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) GivePermission(ctx context.Context, in *EditPermissionRequest, opts ...grpc.CallOption) (*EditPermissionReply, error) {
	out := new(EditPermissionReply)
	err := grpc.Invoke(ctx, "/proxy.NamespaceService/GivePermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) RemovePermission(ctx context.Context, in *EditPermissionRequest, opts ...grpc.CallOption) (*EditPermissionReply, error) {
	out := new(EditPermissionReply)
	err := grpc.Invoke(ctx, "/proxy.NamespaceService/RemovePermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionReply, error) {
	out := new(GetPermissionReply)
	err := grpc.Invoke(ctx, "/proxy.NamespaceService/GetPermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NamespaceService service

type NamespaceServiceServer interface {
	CreateJWT(context.Context, *CreateJWTRequest) (*CreateJWTReply, error)
	CreateNamespace(context.Context, *NamespaceRequest) (*NamespaceReply, error)
	DeleteNamespace(context.Context, *NamespaceRequest) (*NamespaceReply, error)
	GivePermission(context.Context, *EditPermissionRequest) (*EditPermissionReply, error)
	RemovePermission(context.Context, *EditPermissionRequest) (*EditPermissionReply, error)
	GetPermission(context.Context, *GetPermissionRequest) (*GetPermissionReply, error)
}

func RegisterNamespaceServiceServer(s *grpc.Server, srv NamespaceServiceServer) {
	s.RegisterService(&_NamespaceService_serviceDesc, srv)
}

func _NamespaceService_CreateJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).CreateJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.NamespaceService/CreateJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).CreateJWT(ctx, req.(*CreateJWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.NamespaceService/CreateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).CreateNamespace(ctx, req.(*NamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.NamespaceService/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).DeleteNamespace(ctx, req.(*NamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_GivePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).GivePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.NamespaceService/GivePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).GivePermission(ctx, req.(*EditPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_RemovePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).RemovePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.NamespaceService/RemovePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).RemovePermission(ctx, req.(*EditPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).GetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.NamespaceService/GetPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).GetPermission(ctx, req.(*GetPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NamespaceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.NamespaceService",
	HandlerType: (*NamespaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJWT",
			Handler:    _NamespaceService_CreateJWT_Handler,
		},
		{
			MethodName: "CreateNamespace",
			Handler:    _NamespaceService_CreateNamespace_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _NamespaceService_DeleteNamespace_Handler,
		},
		{
			MethodName: "GivePermission",
			Handler:    _NamespaceService_GivePermission_Handler,
		},
		{
			MethodName: "RemovePermission",
			Handler:    _NamespaceService_RemovePermission_Handler,
		},
		{
			MethodName: "GetPermission",
			Handler:    _NamespaceService_GetPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxy.proto",
}

// Client API for ObjectService service

type ObjectServiceClient interface {
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteReply, error)
	WriteFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*WriteFileReply, error)
	WriteStream(ctx context.Context, opts ...grpc.CallOption) (ObjectService_WriteStreamClient, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadReply, error)
	ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*ReadFileReply, error)
	ReadStream(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (ObjectService_ReadStreamClient, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*NullReply, error)
	Walk(ctx context.Context, in *WalkRequest, opts ...grpc.CallOption) (ObjectService_WalkClient, error)
	AppendReferenceList(ctx context.Context, in *ReferenceListRequest, opts ...grpc.CallOption) (*NullReply, error)
	RemoveReferenceList(ctx context.Context, in *ReferenceListRequest, opts ...grpc.CallOption) (*NullReply, error)
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckReply, error)
	Repair(ctx context.Context, in *RepairRequest, opts ...grpc.CallOption) (*NullReply, error)
}

type objectServiceClient struct {
	cc *grpc.ClientConn
}

func NewObjectServiceClient(cc *grpc.ClientConn) ObjectServiceClient {
	return &objectServiceClient{cc}
}

func (c *objectServiceClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteReply, error) {
	out := new(WriteReply)
	err := grpc.Invoke(ctx, "/proxy.ObjectService/Write", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) WriteFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*WriteFileReply, error) {
	out := new(WriteFileReply)
	err := grpc.Invoke(ctx, "/proxy.ObjectService/WriteFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) WriteStream(ctx context.Context, opts ...grpc.CallOption) (ObjectService_WriteStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ObjectService_serviceDesc.Streams[0], c.cc, "/proxy.ObjectService/WriteStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectServiceWriteStreamClient{stream}
	return x, nil
}

type ObjectService_WriteStreamClient interface {
	Send(*WriteStreamRequest) error
	CloseAndRecv() (*WriteStreamReply, error)
	grpc.ClientStream
}

type objectServiceWriteStreamClient struct {
	grpc.ClientStream
}

func (x *objectServiceWriteStreamClient) Send(m *WriteStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *objectServiceWriteStreamClient) CloseAndRecv() (*WriteStreamReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WriteStreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadReply, error) {
	out := new(ReadReply)
	err := grpc.Invoke(ctx, "/proxy.ObjectService/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*ReadFileReply, error) {
	out := new(ReadFileReply)
	err := grpc.Invoke(ctx, "/proxy.ObjectService/ReadFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) ReadStream(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (ObjectService_ReadStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ObjectService_serviceDesc.Streams[1], c.cc, "/proxy.ObjectService/ReadStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectServiceReadStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectService_ReadStreamClient interface {
	Recv() (*ReadReply, error)
	grpc.ClientStream
}

type objectServiceReadStreamClient struct {
	grpc.ClientStream
}

func (x *objectServiceReadStreamClient) Recv() (*ReadReply, error) {
	m := new(ReadReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*NullReply, error) {
	out := new(NullReply)
	err := grpc.Invoke(ctx, "/proxy.ObjectService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) Walk(ctx context.Context, in *WalkRequest, opts ...grpc.CallOption) (ObjectService_WalkClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ObjectService_serviceDesc.Streams[2], c.cc, "/proxy.ObjectService/Walk", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectServiceWalkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectService_WalkClient interface {
	Recv() (*WalkReply, error)
	grpc.ClientStream
}

type objectServiceWalkClient struct {
	grpc.ClientStream
}

func (x *objectServiceWalkClient) Recv() (*WalkReply, error) {
	m := new(WalkReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectServiceClient) AppendReferenceList(ctx context.Context, in *ReferenceListRequest, opts ...grpc.CallOption) (*NullReply, error) {
	out := new(NullReply)
	err := grpc.Invoke(ctx, "/proxy.ObjectService/AppendReferenceList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) RemoveReferenceList(ctx context.Context, in *ReferenceListRequest, opts ...grpc.CallOption) (*NullReply, error) {
	out := new(NullReply)
	err := grpc.Invoke(ctx, "/proxy.ObjectService/RemoveReferenceList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := grpc.Invoke(ctx, "/proxy.ObjectService/Check", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) Repair(ctx context.Context, in *RepairRequest, opts ...grpc.CallOption) (*NullReply, error) {
	out := new(NullReply)
	err := grpc.Invoke(ctx, "/proxy.ObjectService/Repair", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ObjectService service

type ObjectServiceServer interface {
	Write(context.Context, *WriteRequest) (*WriteReply, error)
	WriteFile(context.Context, *WriteFileRequest) (*WriteFileReply, error)
	WriteStream(ObjectService_WriteStreamServer) error
	Read(context.Context, *ReadRequest) (*ReadReply, error)
	ReadFile(context.Context, *ReadFileRequest) (*ReadFileReply, error)
	ReadStream(*ReadRequest, ObjectService_ReadStreamServer) error
	Delete(context.Context, *DeleteRequest) (*NullReply, error)
	Walk(*WalkRequest, ObjectService_WalkServer) error
	AppendReferenceList(context.Context, *ReferenceListRequest) (*NullReply, error)
	RemoveReferenceList(context.Context, *ReferenceListRequest) (*NullReply, error)
	Check(context.Context, *CheckRequest) (*CheckReply, error)
	Repair(context.Context, *RepairRequest) (*NullReply, error)
}

func RegisterObjectServiceServer(s *grpc.Server, srv ObjectServiceServer) {
	s.RegisterService(&_ObjectService_serviceDesc, srv)
}

func _ObjectService_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.ObjectService/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_WriteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).WriteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.ObjectService/WriteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).WriteFile(ctx, req.(*WriteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_WriteStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ObjectServiceServer).WriteStream(&objectServiceWriteStreamServer{stream})
}

type ObjectService_WriteStreamServer interface {
	SendAndClose(*WriteStreamReply) error
	Recv() (*WriteStreamRequest, error)
	grpc.ServerStream
}

type objectServiceWriteStreamServer struct {
	grpc.ServerStream
}

func (x *objectServiceWriteStreamServer) SendAndClose(m *WriteStreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *objectServiceWriteStreamServer) Recv() (*WriteStreamRequest, error) {
	m := new(WriteStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ObjectService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.ObjectService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_ReadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).ReadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.ObjectService/ReadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).ReadFile(ctx, req.(*ReadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_ReadStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectServiceServer).ReadStream(m, &objectServiceReadStreamServer{stream})
}

type ObjectService_ReadStreamServer interface {
	Send(*ReadReply) error
	grpc.ServerStream
}

type objectServiceReadStreamServer struct {
	grpc.ServerStream
}

func (x *objectServiceReadStreamServer) Send(m *ReadReply) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjectService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.ObjectService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_Walk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WalkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectServiceServer).Walk(m, &objectServiceWalkServer{stream})
}

type ObjectService_WalkServer interface {
	Send(*WalkReply) error
	grpc.ServerStream
}

type objectServiceWalkServer struct {
	grpc.ServerStream
}

func (x *objectServiceWalkServer) Send(m *WalkReply) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjectService_AppendReferenceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferenceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).AppendReferenceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.ObjectService/AppendReferenceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).AppendReferenceList(ctx, req.(*ReferenceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_RemoveReferenceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferenceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).RemoveReferenceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.ObjectService/RemoveReferenceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).RemoveReferenceList(ctx, req.(*ReferenceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.ObjectService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_Repair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).Repair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.ObjectService/Repair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).Repair(ctx, req.(*RepairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ObjectService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.ObjectService",
	HandlerType: (*ObjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _ObjectService_Write_Handler,
		},
		{
			MethodName: "WriteFile",
			Handler:    _ObjectService_WriteFile_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _ObjectService_Read_Handler,
		},
		{
			MethodName: "ReadFile",
			Handler:    _ObjectService_ReadFile_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ObjectService_Delete_Handler,
		},
		{
			MethodName: "AppendReferenceList",
			Handler:    _ObjectService_AppendReferenceList_Handler,
		},
		{
			MethodName: "RemoveReferenceList",
			Handler:    _ObjectService_RemoveReferenceList_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _ObjectService_Check_Handler,
		},
		{
			MethodName: "Repair",
			Handler:    _ObjectService_Repair_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WriteStream",
			Handler:       _ObjectService_WriteStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadStream",
			Handler:       _ObjectService_ReadStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Walk",
			Handler:       _ObjectService_Walk_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proxy.proto",
}

func init() { proto.RegisterFile("proxy.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1064 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x4b, 0x6f, 0xdb, 0x46,
	0x10, 0x36, 0x4d, 0x49, 0x31, 0x47, 0x92, 0xc3, 0xac, 0x1f, 0x61, 0xd8, 0x00, 0x75, 0x17, 0x41,
	0xeb, 0x43, 0x6b, 0xd8, 0x0a, 0xda, 0x43, 0x81, 0x00, 0x6d, 0xfd, 0x42, 0x1a, 0xd7, 0x35, 0xe8,
	0x02, 0xbe, 0x96, 0xa1, 0xc6, 0x11, 0x2b, 0x8a, 0x64, 0x97, 0x2b, 0x37, 0xca, 0xa9, 0x3f, 0xac,
	0x87, 0x1e, 0x8a, 0x02, 0xed, 0xaf, 0x2a, 0xf6, 0xc1, 0x15, 0x25, 0xd3, 0x85, 0x10, 0xa5, 0x41,
	0x6f, 0x9c, 0xc7, 0xce, 0x7c, 0xdf, 0xec, 0x68, 0x76, 0x04, 0xed, 0x9c, 0x65, 0xaf, 0x27, 0x7b,
	0x39, 0xcb, 0x78, 0x46, 0x9a, 0x52, 0xa0, 0x7d, 0x80, 0x0b, 0x64, 0xa3, 0xb8, 0x28, 0xe2, 0x2c,
	0x25, 0x9b, 0xd0, 0xfc, 0x85, 0xc5, 0x1c, 0x3d, 0x6b, 0xc7, 0xda, 0x5d, 0x0b, 0x94, 0x40, 0x08,
	0x34, 0x18, 0x86, 0x7d, 0x6f, 0x55, 0x2a, 0xe5, 0x37, 0xd9, 0x86, 0x56, 0x1f, 0x13, 0xe4, 0xe8,
	0xd9, 0x52, 0xab, 0x25, 0x11, 0x21, 0xec, 0x8f, 0xe2, 0xd4, 0x6b, 0xa8, 0x08, 0x52, 0xa0, 0x11,
	0xb8, 0x87, 0x0c, 0x43, 0x8e, 0xdf, 0x5e, 0xfd, 0x10, 0xe0, 0xcf, 0x63, 0x2c, 0x38, 0x79, 0x0c,
	0x4e, 0x1a, 0x8e, 0xb0, 0xc8, 0xc3, 0x48, 0xe5, 0x73, 0x82, 0xa9, 0x82, 0x1c, 0x00, 0xe4, 0x06,
	0x97, 0xcc, 0xdc, 0xee, 0x3d, 0xd8, 0x53, 0x04, 0xa6, 0x80, 0x83, 0x8a, 0x13, 0xfd, 0x18, 0xd6,
	0x2b, 0x49, 0xf2, 0x64, 0x22, 0xc0, 0xf0, 0x6c, 0x88, 0xa9, 0x0e, 0xaf, 0x04, 0xba, 0x0f, 0xee,
	0x79, 0x99, 0x67, 0x21, 0x30, 0xd4, 0x85, 0xf5, 0xca, 0x89, 0x3c, 0x99, 0xd0, 0x5f, 0x2d, 0xd8,
	0x3a, 0xee, 0xc7, 0xbc, 0x02, 0x65, 0x21, 0x5a, 0xdb, 0xd0, 0x1a, 0x17, 0xc8, 0x9e, 0x1f, 0x49,
	0x4a, 0x4e, 0xa0, 0xa5, 0x39, 0xba, 0xf6, 0x22, 0x74, 0xb7, 0x60, 0x63, 0x1e, 0x81, 0x40, 0x76,
	0x06, 0x9b, 0xa7, 0xf8, 0xae, 0x70, 0xd1, 0x53, 0x20, 0x73, 0xd1, 0x44, 0x5d, 0x67, 0xd1, 0x5a,
	0x8b, 0xa0, 0x3d, 0x86, 0xe6, 0xe1, 0x60, 0x9c, 0x0e, 0x45, 0x33, 0x15, 0xf1, 0x1b, 0x05, 0xa1,
	0x11, 0xc8, 0x6f, 0xe2, 0x82, 0x3d, 0xc4, 0x89, 0x4c, 0xdd, 0x09, 0xc4, 0xa7, 0xc0, 0x53, 0x0c,
	0x42, 0xd6, 0x2f, 0x3c, 0x7b, 0xc7, 0x16, 0x78, 0x94, 0x44, 0x7f, 0xb3, 0xa0, 0xf1, 0x1d, 0xf2,
	0x50, 0x5c, 0x2d, 0xe6, 0x59, 0x34, 0x90, 0x71, 0xec, 0x40, 0x09, 0x35, 0x81, 0x3c, 0xb8, 0x87,
	0x69, 0xc4, 0x5e, 0xe0, 0x44, 0x56, 0xb5, 0x13, 0x94, 0x22, 0x79, 0x02, 0xad, 0x48, 0x20, 0x2a,
	0xbc, 0xc6, 0x8e, 0xbd, 0xdb, 0xee, 0x75, 0x34, 0x01, 0x09, 0x33, 0xd0, 0x36, 0xe2, 0xc3, 0x5a,
	0xce, 0xf0, 0x26, 0xce, 0xc6, 0x85, 0xd7, 0x94, 0x01, 0x8c, 0x2c, 0xa8, 0xa4, 0xf8, 0x9a, 0x7b,
	0x2d, 0xa9, 0x97, 0xdf, 0xa2, 0xcc, 0x51, 0x96, 0x5e, 0xc7, 0xaf, 0x2e, 0x38, 0xf3, 0xee, 0x49,
	0xc3, 0x54, 0x41, 0x7f, 0xb7, 0xa0, 0x73, 0x25, 0x7e, 0x53, 0xe5, 0xad, 0x68, 0xc0, 0xd6, 0x14,
	0xf0, 0x87, 0xd0, 0x18, 0x21, 0x0f, 0x75, 0xcb, 0xb7, 0x35, 0x28, 0xc1, 0x39, 0x90, 0x06, 0xc1,
	0xfc, 0x26, 0x4c, 0xc6, 0xa8, 0xf9, 0x28, 0x81, 0x3c, 0x81, 0x2e, 0xc3, 0x6b, 0x64, 0x98, 0x46,
	0x78, 0x16, 0x17, 0x5c, 0x92, 0x72, 0x82, 0x59, 0xa5, 0xa8, 0x86, 0x40, 0x2f, 0xaa, 0xd1, 0x94,
	0xf7, 0x5c, 0x8a, 0xe4, 0x13, 0xc5, 0x53, 0xe4, 0x91, 0x7c, 0xe6, 0x52, 0x1b, 0x23, 0xfd, 0x0c,
	0x40, 0x33, 0x10, 0x9d, 0x50, 0xa2, 0xb5, 0xee, 0x40, 0x4b, 0xff, 0xb6, 0xc0, 0x95, 0xfe, 0x27,
	0x71, 0xb2, 0x0c, 0x6b, 0x1f, 0xd6, 0xae, 0xe3, 0x04, 0x2f, 0x42, 0x3e, 0x90, 0xc4, 0x9d, 0xc0,
	0xc8, 0xef, 0x8f, 0xfb, 0x01, 0xac, 0x57, 0xb8, 0x2c, 0xc4, 0xff, 0x4f, 0x0b, 0x88, 0x3c, 0x73,
	0xc9, 0x19, 0x86, 0xa3, 0xff, 0xc7, 0xbd, 0x77, 0xde, 0x82, 0xfb, 0x53, 0x7d, 0x8f, 0x25, 0x8f,
	0x85, 0xd8, 0x7f, 0x05, 0xed, 0x00, 0xc3, 0xfe, 0xdb, 0xb3, 0xa6, 0xa7, 0xe0, 0xa8, 0x08, 0x7a,
	0x9e, 0xab, 0x12, 0x58, 0xff, 0x5a, 0x82, 0xd5, 0x9a, 0x12, 0xd0, 0x1f, 0xe1, 0xbe, 0x08, 0xf4,
	0xdf, 0xb5, 0x21, 0xfd, 0x1c, 0xba, 0xd3, 0x0c, 0x02, 0xee, 0x2d, 0x60, 0x56, 0x1d, 0xb0, 0x6f,
	0xa0, 0x7b, 0x24, 0xdf, 0xce, 0x25, 0xaa, 0x14, 0x42, 0xfb, 0x2a, 0x4c, 0x86, 0x65, 0x04, 0x1f,
	0xd6, 0x0a, 0x1e, 0x32, 0xfe, 0xc2, 0x84, 0x31, 0xb2, 0x18, 0x50, 0xd7, 0x2c, 0x1b, 0x1d, 0xcb,
	0xe1, 0xb9, 0x2a, 0x87, 0xe7, 0x54, 0x21, 0x1a, 0x85, 0x67, 0xca, 0x66, 0x4b, 0x5b, 0x29, 0xd2,
	0x37, 0xe0, 0xa8, 0x14, 0x82, 0xd9, 0xfb, 0x6d, 0x5f, 0x9a, 0xc1, 0x66, 0x50, 0x55, 0x2c, 0x71,
	0x81, 0xb7, 0x12, 0xda, 0x75, 0x09, 0xdb, 0xe0, 0x9c, 0x8f, 0x93, 0x44, 0xbd, 0xa8, 0x3b, 0xd0,
	0x39, 0x1c, 0x60, 0x34, 0xbc, 0x33, 0x2b, 0x4d, 0x00, 0xb4, 0x87, 0x28, 0xce, 0x3e, 0xb4, 0x0a,
	0x1e, 0xf2, 0x71, 0x21, 0x5d, 0xd6, 0x7b, 0x9e, 0x79, 0x58, 0x4a, 0x97, 0xbd, 0x4b, 0x69, 0x0f,
	0xb4, 0x1f, 0xfd, 0x14, 0x5a, 0x4a, 0x43, 0x5a, 0xb0, 0x9a, 0x0d, 0xdd, 0x15, 0xd2, 0x15, 0xcf,
	0x08, 0x63, 0xe3, 0x9c, 0x63, 0xdf, 0xb5, 0x48, 0x1b, 0xee, 0xc9, 0x87, 0x34, 0x7d, 0xe5, 0xae,
	0xd2, 0x8f, 0x44, 0x9f, 0xe5, 0x61, 0xcc, 0xee, 0x04, 0xd4, 0xfb, 0xc3, 0xae, 0xec, 0x38, 0x97,
	0xc8, 0x6e, 0xe2, 0x08, 0xc9, 0x33, 0x70, 0xcc, 0x7e, 0x44, 0x1e, 0x96, 0xa0, 0xe6, 0xd6, 0x32,
	0x7f, 0xeb, 0xb6, 0x41, 0x14, 0x61, 0x85, 0x1c, 0xc2, 0x7d, 0xa5, 0x33, 0x81, 0x4d, 0x90, 0xf9,
	0x75, 0xca, 0x04, 0x99, 0xdb, 0x9a, 0x64, 0x10, 0xd5, 0xec, 0xcb, 0x04, 0x39, 0x83, 0xf5, 0xd3,
	0xf8, 0x06, 0x2b, 0x7b, 0xeb, 0x63, 0xed, 0x5a, 0xbb, 0x92, 0xf9, 0xfe, 0x1d, 0x56, 0x15, 0xed,
	0x1c, 0xdc, 0x00, 0x47, 0xd9, 0x3b, 0x8b, 0xf7, 0x1c, 0xba, 0x33, 0x2b, 0x13, 0xf9, 0x40, 0xbb,
	0xd7, 0xad, 0x65, 0xfe, 0xa3, 0x7a, 0xa3, 0x0c, 0xd5, 0xfb, 0xab, 0x09, 0xdd, 0xef, 0x5f, 0xfe,
	0x84, 0x11, 0x2f, 0xef, 0xf0, 0x00, 0x9a, 0x72, 0x0a, 0x93, 0x0d, 0x7d, 0xae, 0xba, 0x4d, 0xf8,
	0x0f, 0x66, 0x95, 0x0a, 0xcf, 0x33, 0x70, 0xcc, 0xa3, 0x65, 0x8a, 0x3d, 0xff, 0x24, 0x9b, 0x62,
	0xcf, 0xbe, 0x6f, 0x74, 0x85, 0x1c, 0x43, 0xbb, 0x32, 0xf7, 0xc9, 0xa3, 0xaa, 0xdf, 0xcc, 0x9b,
	0xe6, 0x3f, 0xac, 0x33, 0xc9, 0x20, 0xbb, 0x16, 0xd9, 0x83, 0x86, 0x18, 0x8e, 0x84, 0x68, 0xa7,
	0xca, 0xb3, 0xe0, 0xbb, 0x33, 0x3a, 0x95, 0xf6, 0x4b, 0x58, 0x2b, 0x87, 0x29, 0xd9, 0xae, 0xd8,
	0xab, 0x98, 0x37, 0x6f, 0xe9, 0xd5, 0xd9, 0x2f, 0x00, 0x84, 0x4a, 0x23, 0x5e, 0x30, 0xe3, 0xbe,
	0x45, 0x7a, 0xd0, 0x3a, 0xd2, 0xff, 0x62, 0xb4, 0x7d, 0x66, 0x30, 0x9b, 0x53, 0xd3, 0xd1, 0xb0,
	0x42, 0xf6, 0xa1, 0x21, 0xc6, 0xa2, 0xc9, 0x52, 0x19, 0xc3, 0xc6, 0xdf, 0xcc, 0x4d, 0x99, 0xe5,
	0x04, 0x36, 0xbe, 0xce, 0x73, 0x4c, 0xfb, 0x33, 0x23, 0xcd, 0x74, 0x49, 0xdd, 0xa0, 0xab, 0xcd,
	0x7c, 0x02, 0x1b, 0xaa, 0x6f, 0x97, 0x8c, 0x73, 0x20, 0x36, 0x73, 0x8c, 0x86, 0xa6, 0xa5, 0xaa,
	0xc3, 0xce, 0xb4, 0xd4, 0x74, 0x78, 0xd1, 0x15, 0x51, 0x28, 0x35, 0x81, 0xc8, 0xf4, 0x0a, 0x2a,
	0x03, 0xa9, 0x2e, 0xcd, 0xcb, 0x96, 0xfc, 0xdb, 0xf9, 0xf4, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xfe, 0xe8, 0x4f, 0xc5, 0x85, 0x0e, 0x00, 0x00,
}
