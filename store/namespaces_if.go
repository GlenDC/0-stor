package main

//This file is auto-generated by go-raml
//Do not edit this file by hand since it will be overwritten during the next generation

import (
	"github.com/gorilla/mux"
	"github.com/justinas/alice"
	"net/http"
)

// NamespacesInterface is interface for /namespaces root endpoint
type NamespacesInterface interface { // nsidaclPost is the handler for POST /namespaces/{nsid}/acl
	// Create an dataAccessToken for a user. This token gives this user access to the data in this namespace
	nsidaclPost(http.ResponseWriter, *http.Request)
	// DeleteObject is the handler for DELETE /namespaces/{nsid}/objects/{id}
	// Delete object from the store
	DeleteObject(http.ResponseWriter, *http.Request)
	// GetObject is the handler for GET /namespaces/{nsid}/objects/{id}
	// Retrieve object from the store
	GetObject(http.ResponseWriter, *http.Request)
	// UpdateObject is the handler for PUT /namespaces/{nsid}/objects/{id}
	// Update oject
	UpdateObject(http.ResponseWriter, *http.Request)
	// Listobjects is the handler for GET /namespaces/{nsid}/objects
	// List keys of the namespaces
	Listobjects(http.ResponseWriter, *http.Request)
	// Createobject is the handler for POST /namespaces/{nsid}/objects
	// Set an object into the namespace
	Createobject(http.ResponseWriter, *http.Request)
	// nsidreservationidGet is the handler for GET /namespaces/{nsid}/reservation/{id}
	// Return information about a reservation
	nsidreservationidGet(http.ResponseWriter, *http.Request)
	// UpdateReservation is the handler for PUT /namespaces/{nsid}/reservation/{id}
	// Renew an existing reservation
	UpdateReservation(http.ResponseWriter, *http.Request)
	// ListReservations is the handler for GET /namespaces/{nsid}/reservation
	// Return a list of all the existing reservation for the give resource
	ListReservations(http.ResponseWriter, *http.Request)
	// CreateReservation is the handler for POST /namespaces/{nsid}/reservation
	// Create a reservation for the given resource.
	CreateReservation(http.ResponseWriter, *http.Request)
	// StatsNamespace is the handler for GET /namespaces/{nsid}/stats
	// Return usage statistics about this namespace
	StatsNamespace(http.ResponseWriter, *http.Request)
	// Deletensid is the handler for DELETE /namespaces/{nsid}
	// Delete nsid
	Deletensid(http.ResponseWriter, *http.Request)
	// Getnsid is the handler for GET /namespaces/{nsid}
	// Get detail view about nsid
	Getnsid(http.ResponseWriter, *http.Request)
	// Updatensid is the handler for PUT /namespaces/{nsid}
	// Update nsid
	Updatensid(http.ResponseWriter, *http.Request)
	// Listnamespaces is the handler for GET /namespaces
	// List all namespaces
	Listnamespaces(http.ResponseWriter, *http.Request)
	// Createnamespace is the handler for POST /namespaces
	// Create a new namespace
	Createnamespace(http.ResponseWriter, *http.Request)
}

// NamespacesInterfaceRoutes is routing for /namespaces root endpoint
func NamespacesInterfaceRoutes(r *mux.Router, i NamespacesInterface) {
	r.HandleFunc("/namespaces/{nsid}/acl", i.nsidaclPost).Methods("POST")
	r.HandleFunc("/namespaces/{nsid}/objects/{id}", i.DeleteObject).Methods("DELETE")
	r.HandleFunc("/namespaces/{nsid}/objects/{id}", i.GetObject).Methods("GET")
	r.HandleFunc("/namespaces/{nsid}/objects/{id}", i.UpdateObject).Methods("PUT")
	r.HandleFunc("/namespaces/{nsid}/objects", i.Listobjects).Methods("GET")
	r.HandleFunc("/namespaces/{nsid}/objects", i.Createobject).Methods("POST")
	r.HandleFunc("/namespaces/{nsid}/reservation/{id}", i.nsidreservationidGet).Methods("GET")
	r.HandleFunc("/namespaces/{nsid}/reservation/{id}", i.UpdateReservation).Methods("PUT")
	r.HandleFunc("/namespaces/{nsid}/reservation", i.ListReservations).Methods("GET")
	r.HandleFunc("/namespaces/{nsid}/reservation", i.CreateReservation).Methods("POST")
	r.HandleFunc("/namespaces/{nsid}/stats", i.StatsNamespace).Methods("GET")
	r.HandleFunc("/namespaces/{nsid}", i.Deletensid).Methods("DELETE")
	r.HandleFunc("/namespaces/{nsid}", i.Getnsid).Methods("GET")
	r.HandleFunc("/namespaces/{nsid}", i.Updatensid).Methods("PUT")
	r.Handle("/namespaces", alice.New(NewOauth2itsyouonlineMiddleware([]string{"user:name"}).Handler).Then(http.HandlerFunc(i.Listnamespaces))).Methods("GET")
	r.Handle("/namespaces", alice.New(NewOauth2itsyouonlineMiddleware([]string{"user:name"}).Handler).Then(http.HandlerFunc(i.Createnamespace))).Methods("POST")
}
