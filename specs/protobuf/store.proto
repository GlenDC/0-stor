syntax = "proto3";

// Types
message Emtpy {

}
message ACL {
    bool read = 1;
    bool write = 2;
    bool delete = 3;
    bool admin = 4;
}
message Namespace {
    string label = 1;
    repeated ACL acl = 2;
}

message NamespaceStat {
    int64 requestPerHour = 1;
    int64 nrObjects = 2;
}

message Reservation {
    string id = 1;
    string adminID  = 2; //ItYou.Online ID of the user that has right to administrate this reservation
    int64 created = 3; // timestamp of the date of creation of the reservation
    int64 updated = 4; // timestamp of the date of when the reservation has been renewed the last time
    int64 sizeReserved = 5;
    int64 sizeUsed = 6;
    int64 expireAt = 7; //timestamp of the expiration date
}

message Object {
    string key = 1;
    bytes value = 2;
    map<string, string> tags = 3;
}

// Namespace management
message ListNamespaceRequest {}
// message ListNamespaceReply {}

message CreateNamespaceRequest {
    string label = 1;
}
message CreateNamespaceReply {}

message GetNamespaceRequest {
    string label = 1;
}
message GetNamespaceReply {
    Namespace namespace = 1;
}

message DeleteNamespaceRequest {
    string label = 1;
}
message DeleteNamespaceReply {}

message GetNamespaceStatRequest {
    string label = 1;
}
message GetNamespaceStatReply {
    NamespaceStat stat = 1;
}

message AuthorizeUserRequest {
    string id = 1; // id of the user to authorize
    ACL acl = 2;
}
message AuthorizeUserReply {}

service NamespaceManager {
    rpc List (ListReservationRequest) returns (stream Namespace) {}
    rpc Create (CreateReservationRequest) returns (CreateNamespaceReply) {}
    rpc Get (GetNamespaceStatRequest) returns (GetNamespaceReply) {}
    rpc Delete (DeleteNamespaceRequest) returns (DeleteNamespaceReply) {}
    rpc Stat (GetNamespaceStatRequest) returns (GetNamespaceStatReply) {}
}

// Reservation management
message CreateReservationRequest {
    string label = 1;
    int64 size = 2; // size to reserve in MiB
    int64 period = 3; //Number of days
}
message CreateReservationReply {
    Reservation reservation = 1;
}

message ListReservationRequest {
    string label = 1;
}
message ListReservationReply {
    repeated Reservation reservations = 1;
}

message GetReservationRequest {
    string label = 1;
    string id = 2;
}
message GetReservationReply {
    Reservation reservation = 1;
}

message RenewReservationRequest {
    string label = 1;
    string id = 2;
    int64 size = 3; // size to reserve in MiB
    int64 period = 4; //Number of days
}
message RenewReservationReply {
    Reservation reservation = 1;
}

service ReservationManager {
    rpc Create (CreateObjectRequest) returns (CreateReservationReply) {}
    rpc List (ListReservationRequest) returns (stream Reservation) {}
    rpc Get (GetReservationRequest) returns (GetReservationReply) {}
    rpc Renew (RenewReservationRequest) returns (RenewReservationReply) {}
}

// Object management
message ListObjectsRequest {}
// message ListObjectsReply {}

message CreateObjectRequest {
    Object object = 1;
}
message CreateObjectReply {}

message ExistsObjectRequest {
    string key = 1;
}
message ExistsObjectReply {
    bool exists = 1;
}

message GetObjectRequest {
    string key = 1;
}
message GetObjectReply {
    Object object = 2;
}

message DeleteObjectRequest {
    string key = 1;
}
message DeleteObjectReply {}

service ObjectManager {
    rpc Create (CreateObjectRequest) returns (CreateObjectReply) {}
    rpc List (ListObjectsRequest) returns (stream Object) {}
    rpc Get (GetObjectRequest) returns (GetObjectReply) {}
    rpc Exists (ExistsObjectRequest) returns (ExistsObjectReply) {}
    rpc Delete (DeleteObjectRequest) returns (DeleteObjectReply) {}
}
