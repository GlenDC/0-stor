#%RAML 1.0
title: "0-Stor"
description: "0-Stor REST API"
version: 0.0.1
mediaType: application/json

uses:
  reservation: https://raw.githubusercontent.com/Jumpscale-Cockpit/raml-definitions/master/librairies/reservation.raml

securitySchemes:
  itsyouonline: !include https://raw.githubusercontent.com/Jumpscale-Cockpit/raml-definitions/master/securityScheme/iyo.raml

resourceTypes:
  collection: !include https://raw.githubusercontent.com/Jumpscale-Cockpit/raml-definitions/master/resourceTypes/collection.raml
  member: !include https://raw.githubusercontent.com/Jumpscale-Cockpit/raml-definitions/master/resourceTypes/member.raml
  listing: !include https://raw.githubusercontent.com/Jumpscale-Cockpit/raml-definitions/master/resourceTypes/listing.raml

traits:
  paginated: !include https://raw.githubusercontent.com/Jumpscale-Cockpit/raml-definitions/master/traits/pagination.raml

types:
  ACLEntry:
    description: |
      ACL entry for a reservation
    properties:
      read: boolean
      write: boolean
      delete: boolean
      admin: boolean

  ACL:
    description: |
      Mapping between a user ID or group ID and an ACLEntry
    properties:
      id:
        type: string
        pattern: ^\w+$
        required: true
      acl:
        type: ACLEntry
        required: true

  NamespaceCreate:
    properties:
      label:
        type: string
        required: true
        minLength: 5
        maxLength: 128
        pattern: ^\w+$
      acl:
        type: ACL[]
    examples:
      properties:
        label: MyLabel
        acl:
          - id: normalUser
            acl:
              read: true
              write: true
              delete: false
              admin: false
          - id: admin
            acl:
              read: true
              write: true
              delete: true
              admin: true

  Namespace:
    type: NamespaceCreate
    properties:
      spaceUsed:
        description: |
          Total size in MiB used in the namespace
        type: number
        format: float
        required: false
      spaceAvailable:
        description: |
          Size in MiB of remaining in the namespace. It the result of (totalSize - spaceUsed)
        type: number
        format: float
        required: false

  NamespaceStat:
    properties:
      requestPerHour:
        description: |
          Number of request per hour
        type: integer
        format: int64
      NrObjects:
        description: |
          Number of object contained in this namespace
        type: integer
        format: int64

  StoreStat:
      properties:
        size:
          description: |
            Total available size (MBs) of the Store. Total reservations size can't exceed that value
          required: true
          type: integer
          format: int64
          minimum: 1
      examples:
        properties:
          size: 128

  Tag:
    properties:
      key:
        type: string
        required: true
        pattern: ^\w+$
      value:
        type: string
        required: true

  Object:
    properties:
      id:
        required: true
        type: string
        minLength: 5
        maxLength: 128
        pattern: ^\w+$
      data:
        required: true
        type: file
        fileTypes: ['*/*'] # any file type allowed
        # maxLength: 1048576 TODO: define max upload size
      tags:
        required: false
        type: Tag[]

  # Needed to fullfill collection resourceTypes interface
  ObjectCreate:
    type: Object

  ObjectUpdate:
    properties:
      data:
        required: true
        type: file
        fileTypes: ['*/*'] # any file type allowed
        # maxLength: 1048576 TODO: define max upload size
      tags:
        required: false
        type: Tag[]

  Error:
    properties:
      error:
        type: string
        required: true

/namespaces:
  securedBy: [ itsyouonline : { scopes: ["user:name"] } ]
  type: collection
  get:
    is: [ paginated ]
  post:
    body:
      type: NamespaceCreate

  /stats:
     securedBy: [ itsyouonline : { scopes: ["user:name"] } ]
     post:
      displayName: UpdateStoreStats
      description: |
        Update Global Store statistics and available space
      body:
        type: StoreStat
      responses:
        200:
          description: Store statistics updated successfully
          body:
            description: |
              New Store statistics
            type:
              StoreStat
        400:
          description: |
            Bad request
     get:
      displayName: GetStoreStats
      description: |
        Return usage statistics about the whole store
      responses:
        200:
          body:
            type: StoreStat

  /{nsid}:
    securedBy: [ reservation.reservationToken ]
    type: member
    /stats:
      securedBy: [ reservation.reservationToken ]
      get:
        displayName: StatsNamespace
        description: |
          Return usage statistics about this namespace
        responses:
          200:
            body:
              type: NamespaceStat
          404:
            description: |
              No namespace with this id found
    /acl:
      securedBy: [ reservation.reservationToken ]
      post:
        description: |
          Create an dataAccessToken for a user. This token gives this user access to the data in this namespace
        body:
          type: ACL
        responses:
          200:
            description: Token created succesfully
            body:
              description: |
                the dataAccessToken
              properties:
                dataAccessToken: string
    /reservation:
      description: |
        Management of the reservation for this namespace
      type: reservation.reservableCollection
      /{id}:
        type: reservation.reservableMember

    /objects:
      type: collection
      securedBy: [ reservation.dataAccessToken ]
      post:
        description: |
          Set an object into the namespace
      get:
        is: [paginated]
        description: |
          List keys of the namespaces
      /{id}:
        securedBy: [ reservation.dataAccessToken ]
        head:
          displayName: ExistObject
          description: |
            Test if an object with this id exists
          responses:
            200:
              description: Object exists
            404:
              description: |
                No object found with this id
        get:
          displayName: GetObject
          description: |
            Retrieve object from the store
          responses:
            200:
              body:
                type: object
            404:
              description: |
                Object not found
        put:
          displayName: UpdateObject
          description: |
            Update oject
          body:
            type: ObjectUpdate
          responses:
            200:
              description: |
                Object has been updated
              # body: TODO
            404:
              description: |
                Object not found
        delete:
          displayName: DeleteObject
          description: |
            Delete object from the store
          responses:
            204:
              description: |
                Object deleted succesfully
            404:
              description: |
                Object not found
