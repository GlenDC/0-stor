// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: schema/zstor.proto

/*
	Package zstor is a generated protocol buffer package.

	It is generated from these files:
		schema/zstor.proto

	It has these top-level messages:
		GetNamespaceRequest
		GetNamespaceResponse
		SetObjectRequest
		SetObjectResponse
		GetObjectRequest
		GetObjectResponse
		DeleteObjectRequest
		DeleteObjectResponse
		GetObjectStatusRequest
		GetObjectStatusResponse
		ListObjectKeysRequest
		ListObjectKeysResponse
		SetReferenceListRequest
		SetReferenceListResponse
		GetReferenceListRequest
		GetReferenceListResponse
		GetReferenceCountRequest
		GetReferenceCountResponse
		AppendToReferenceListRequest
		AppendToReferenceListResponse
		DeleteFromReferenceListRequest
		DeleteFromReferenceListResponse
		DeleteReferenceListRequest
		DeleteReferenceListResponse
*/
package zstor

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ObjectStatus int32

const (
	ObjectStatusMissing   ObjectStatus = 0
	ObjectStatusOK        ObjectStatus = 1
	ObjectStatusCorrupted ObjectStatus = 2
)

var ObjectStatus_name = map[int32]string{
	0: "missing",
	1: "ok",
	2: "corrupted",
}
var ObjectStatus_value = map[string]int32{
	"missing":   0,
	"ok":        1,
	"corrupted": 2,
}

func (ObjectStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorZstor, []int{0} }

type GetNamespaceRequest struct {
}

func (m *GetNamespaceRequest) Reset()                    { *m = GetNamespaceRequest{} }
func (*GetNamespaceRequest) ProtoMessage()               {}
func (*GetNamespaceRequest) Descriptor() ([]byte, []int) { return fileDescriptorZstor, []int{0} }

type GetNamespaceResponse struct {
	Label               string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	ReadRequestPerHour  int64  `protobuf:"varint,2,opt,name=readRequestPerHour,proto3" json:"readRequestPerHour,omitempty"`
	WriteRequestPerHour int64  `protobuf:"varint,3,opt,name=writeRequestPerHour,proto3" json:"writeRequestPerHour,omitempty"`
	NrObjects           int64  `protobuf:"varint,4,opt,name=nrObjects,proto3" json:"nrObjects,omitempty"`
}

func (m *GetNamespaceResponse) Reset()                    { *m = GetNamespaceResponse{} }
func (*GetNamespaceResponse) ProtoMessage()               {}
func (*GetNamespaceResponse) Descriptor() ([]byte, []int) { return fileDescriptorZstor, []int{1} }

func (m *GetNamespaceResponse) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *GetNamespaceResponse) GetReadRequestPerHour() int64 {
	if m != nil {
		return m.ReadRequestPerHour
	}
	return 0
}

func (m *GetNamespaceResponse) GetWriteRequestPerHour() int64 {
	if m != nil {
		return m.WriteRequestPerHour
	}
	return 0
}

func (m *GetNamespaceResponse) GetNrObjects() int64 {
	if m != nil {
		return m.NrObjects
	}
	return 0
}

type SetObjectRequest struct {
	Key           []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Data          []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	ReferenceList []string `protobuf:"bytes,3,rep,name=referenceList" json:"referenceList,omitempty"`
}

func (m *SetObjectRequest) Reset()                    { *m = SetObjectRequest{} }
func (*SetObjectRequest) ProtoMessage()               {}
func (*SetObjectRequest) Descriptor() ([]byte, []int) { return fileDescriptorZstor, []int{2} }

func (m *SetObjectRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SetObjectRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SetObjectRequest) GetReferenceList() []string {
	if m != nil {
		return m.ReferenceList
	}
	return nil
}

type SetObjectResponse struct {
}

func (m *SetObjectResponse) Reset()                    { *m = SetObjectResponse{} }
func (*SetObjectResponse) ProtoMessage()               {}
func (*SetObjectResponse) Descriptor() ([]byte, []int) { return fileDescriptorZstor, []int{3} }

type GetObjectRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *GetObjectRequest) Reset()                    { *m = GetObjectRequest{} }
func (*GetObjectRequest) ProtoMessage()               {}
func (*GetObjectRequest) Descriptor() ([]byte, []int) { return fileDescriptorZstor, []int{4} }

func (m *GetObjectRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetObjectResponse struct {
	Data          []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	ReferenceList []string `protobuf:"bytes,2,rep,name=referenceList" json:"referenceList,omitempty"`
}

func (m *GetObjectResponse) Reset()                    { *m = GetObjectResponse{} }
func (*GetObjectResponse) ProtoMessage()               {}
func (*GetObjectResponse) Descriptor() ([]byte, []int) { return fileDescriptorZstor, []int{5} }

func (m *GetObjectResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetObjectResponse) GetReferenceList() []string {
	if m != nil {
		return m.ReferenceList
	}
	return nil
}

type DeleteObjectRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *DeleteObjectRequest) Reset()                    { *m = DeleteObjectRequest{} }
func (*DeleteObjectRequest) ProtoMessage()               {}
func (*DeleteObjectRequest) Descriptor() ([]byte, []int) { return fileDescriptorZstor, []int{6} }

func (m *DeleteObjectRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type DeleteObjectResponse struct {
}

func (m *DeleteObjectResponse) Reset()                    { *m = DeleteObjectResponse{} }
func (*DeleteObjectResponse) ProtoMessage()               {}
func (*DeleteObjectResponse) Descriptor() ([]byte, []int) { return fileDescriptorZstor, []int{7} }

type GetObjectStatusRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *GetObjectStatusRequest) Reset()                    { *m = GetObjectStatusRequest{} }
func (*GetObjectStatusRequest) ProtoMessage()               {}
func (*GetObjectStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptorZstor, []int{8} }

func (m *GetObjectStatusRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetObjectStatusResponse struct {
	Status ObjectStatus `protobuf:"varint,1,opt,name=status,proto3,enum=ObjectStatus" json:"status,omitempty"`
}

func (m *GetObjectStatusResponse) Reset()                    { *m = GetObjectStatusResponse{} }
func (*GetObjectStatusResponse) ProtoMessage()               {}
func (*GetObjectStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptorZstor, []int{9} }

func (m *GetObjectStatusResponse) GetStatus() ObjectStatus {
	if m != nil {
		return m.Status
	}
	return ObjectStatusMissing
}

type ListObjectKeysRequest struct {
}

func (m *ListObjectKeysRequest) Reset()                    { *m = ListObjectKeysRequest{} }
func (*ListObjectKeysRequest) ProtoMessage()               {}
func (*ListObjectKeysRequest) Descriptor() ([]byte, []int) { return fileDescriptorZstor, []int{10} }

type ListObjectKeysResponse struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *ListObjectKeysResponse) Reset()                    { *m = ListObjectKeysResponse{} }
func (*ListObjectKeysResponse) ProtoMessage()               {}
func (*ListObjectKeysResponse) Descriptor() ([]byte, []int) { return fileDescriptorZstor, []int{11} }

func (m *ListObjectKeysResponse) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type SetReferenceListRequest struct {
	Key           []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ReferenceList []string `protobuf:"bytes,2,rep,name=referenceList" json:"referenceList,omitempty"`
}

func (m *SetReferenceListRequest) Reset()                    { *m = SetReferenceListRequest{} }
func (*SetReferenceListRequest) ProtoMessage()               {}
func (*SetReferenceListRequest) Descriptor() ([]byte, []int) { return fileDescriptorZstor, []int{12} }

func (m *SetReferenceListRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SetReferenceListRequest) GetReferenceList() []string {
	if m != nil {
		return m.ReferenceList
	}
	return nil
}

type SetReferenceListResponse struct {
}

func (m *SetReferenceListResponse) Reset()                    { *m = SetReferenceListResponse{} }
func (*SetReferenceListResponse) ProtoMessage()               {}
func (*SetReferenceListResponse) Descriptor() ([]byte, []int) { return fileDescriptorZstor, []int{13} }

type GetReferenceListRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *GetReferenceListRequest) Reset()                    { *m = GetReferenceListRequest{} }
func (*GetReferenceListRequest) ProtoMessage()               {}
func (*GetReferenceListRequest) Descriptor() ([]byte, []int) { return fileDescriptorZstor, []int{14} }

func (m *GetReferenceListRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetReferenceListResponse struct {
	ReferenceList []string `protobuf:"bytes,1,rep,name=referenceList" json:"referenceList,omitempty"`
}

func (m *GetReferenceListResponse) Reset()                    { *m = GetReferenceListResponse{} }
func (*GetReferenceListResponse) ProtoMessage()               {}
func (*GetReferenceListResponse) Descriptor() ([]byte, []int) { return fileDescriptorZstor, []int{15} }

func (m *GetReferenceListResponse) GetReferenceList() []string {
	if m != nil {
		return m.ReferenceList
	}
	return nil
}

type GetReferenceCountRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *GetReferenceCountRequest) Reset()                    { *m = GetReferenceCountRequest{} }
func (*GetReferenceCountRequest) ProtoMessage()               {}
func (*GetReferenceCountRequest) Descriptor() ([]byte, []int) { return fileDescriptorZstor, []int{16} }

func (m *GetReferenceCountRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetReferenceCountResponse struct {
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *GetReferenceCountResponse) Reset()                    { *m = GetReferenceCountResponse{} }
func (*GetReferenceCountResponse) ProtoMessage()               {}
func (*GetReferenceCountResponse) Descriptor() ([]byte, []int) { return fileDescriptorZstor, []int{17} }

func (m *GetReferenceCountResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type AppendToReferenceListRequest struct {
	Key           []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ReferenceList []string `protobuf:"bytes,2,rep,name=referenceList" json:"referenceList,omitempty"`
}

func (m *AppendToReferenceListRequest) Reset()      { *m = AppendToReferenceListRequest{} }
func (*AppendToReferenceListRequest) ProtoMessage() {}
func (*AppendToReferenceListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorZstor, []int{18}
}

func (m *AppendToReferenceListRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *AppendToReferenceListRequest) GetReferenceList() []string {
	if m != nil {
		return m.ReferenceList
	}
	return nil
}

type AppendToReferenceListResponse struct {
}

func (m *AppendToReferenceListResponse) Reset()      { *m = AppendToReferenceListResponse{} }
func (*AppendToReferenceListResponse) ProtoMessage() {}
func (*AppendToReferenceListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorZstor, []int{19}
}

type DeleteFromReferenceListRequest struct {
	Key           []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ReferenceList []string `protobuf:"bytes,2,rep,name=referenceList" json:"referenceList,omitempty"`
}

func (m *DeleteFromReferenceListRequest) Reset()      { *m = DeleteFromReferenceListRequest{} }
func (*DeleteFromReferenceListRequest) ProtoMessage() {}
func (*DeleteFromReferenceListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorZstor, []int{20}
}

func (m *DeleteFromReferenceListRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DeleteFromReferenceListRequest) GetReferenceList() []string {
	if m != nil {
		return m.ReferenceList
	}
	return nil
}

type DeleteFromReferenceListResponse struct {
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *DeleteFromReferenceListResponse) Reset()      { *m = DeleteFromReferenceListResponse{} }
func (*DeleteFromReferenceListResponse) ProtoMessage() {}
func (*DeleteFromReferenceListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorZstor, []int{21}
}

func (m *DeleteFromReferenceListResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type DeleteReferenceListRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *DeleteReferenceListRequest) Reset()                    { *m = DeleteReferenceListRequest{} }
func (*DeleteReferenceListRequest) ProtoMessage()               {}
func (*DeleteReferenceListRequest) Descriptor() ([]byte, []int) { return fileDescriptorZstor, []int{22} }

func (m *DeleteReferenceListRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type DeleteReferenceListResponse struct {
}

func (m *DeleteReferenceListResponse) Reset()      { *m = DeleteReferenceListResponse{} }
func (*DeleteReferenceListResponse) ProtoMessage() {}
func (*DeleteReferenceListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorZstor, []int{23}
}

func init() {
	proto.RegisterType((*GetNamespaceRequest)(nil), "GetNamespaceRequest")
	proto.RegisterType((*GetNamespaceResponse)(nil), "GetNamespaceResponse")
	proto.RegisterType((*SetObjectRequest)(nil), "SetObjectRequest")
	proto.RegisterType((*SetObjectResponse)(nil), "SetObjectResponse")
	proto.RegisterType((*GetObjectRequest)(nil), "GetObjectRequest")
	proto.RegisterType((*GetObjectResponse)(nil), "GetObjectResponse")
	proto.RegisterType((*DeleteObjectRequest)(nil), "DeleteObjectRequest")
	proto.RegisterType((*DeleteObjectResponse)(nil), "DeleteObjectResponse")
	proto.RegisterType((*GetObjectStatusRequest)(nil), "GetObjectStatusRequest")
	proto.RegisterType((*GetObjectStatusResponse)(nil), "GetObjectStatusResponse")
	proto.RegisterType((*ListObjectKeysRequest)(nil), "ListObjectKeysRequest")
	proto.RegisterType((*ListObjectKeysResponse)(nil), "ListObjectKeysResponse")
	proto.RegisterType((*SetReferenceListRequest)(nil), "SetReferenceListRequest")
	proto.RegisterType((*SetReferenceListResponse)(nil), "SetReferenceListResponse")
	proto.RegisterType((*GetReferenceListRequest)(nil), "GetReferenceListRequest")
	proto.RegisterType((*GetReferenceListResponse)(nil), "GetReferenceListResponse")
	proto.RegisterType((*GetReferenceCountRequest)(nil), "GetReferenceCountRequest")
	proto.RegisterType((*GetReferenceCountResponse)(nil), "GetReferenceCountResponse")
	proto.RegisterType((*AppendToReferenceListRequest)(nil), "AppendToReferenceListRequest")
	proto.RegisterType((*AppendToReferenceListResponse)(nil), "AppendToReferenceListResponse")
	proto.RegisterType((*DeleteFromReferenceListRequest)(nil), "DeleteFromReferenceListRequest")
	proto.RegisterType((*DeleteFromReferenceListResponse)(nil), "DeleteFromReferenceListResponse")
	proto.RegisterType((*DeleteReferenceListRequest)(nil), "DeleteReferenceListRequest")
	proto.RegisterType((*DeleteReferenceListResponse)(nil), "DeleteReferenceListResponse")
	proto.RegisterEnum("ObjectStatus", ObjectStatus_name, ObjectStatus_value)
}
func (this *GetNamespaceRequest) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*GetNamespaceRequest)
	if !ok {
		that2, ok := that.(GetNamespaceRequest)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	return 0
}
func (this *GetNamespaceResponse) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*GetNamespaceResponse)
	if !ok {
		that2, ok := that.(GetNamespaceResponse)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Label != that1.Label {
		if this.Label < that1.Label {
			return -1
		}
		return 1
	}
	if this.ReadRequestPerHour != that1.ReadRequestPerHour {
		if this.ReadRequestPerHour < that1.ReadRequestPerHour {
			return -1
		}
		return 1
	}
	if this.WriteRequestPerHour != that1.WriteRequestPerHour {
		if this.WriteRequestPerHour < that1.WriteRequestPerHour {
			return -1
		}
		return 1
	}
	if this.NrObjects != that1.NrObjects {
		if this.NrObjects < that1.NrObjects {
			return -1
		}
		return 1
	}
	return 0
}
func (this *SetObjectRequest) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*SetObjectRequest)
	if !ok {
		that2, ok := that.(SetObjectRequest)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := bytes.Compare(this.Key, that1.Key); c != 0 {
		return c
	}
	if c := bytes.Compare(this.Data, that1.Data); c != 0 {
		return c
	}
	if len(this.ReferenceList) != len(that1.ReferenceList) {
		if len(this.ReferenceList) < len(that1.ReferenceList) {
			return -1
		}
		return 1
	}
	for i := range this.ReferenceList {
		if this.ReferenceList[i] != that1.ReferenceList[i] {
			if this.ReferenceList[i] < that1.ReferenceList[i] {
				return -1
			}
			return 1
		}
	}
	return 0
}
func (this *SetObjectResponse) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*SetObjectResponse)
	if !ok {
		that2, ok := that.(SetObjectResponse)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	return 0
}
func (this *GetObjectRequest) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*GetObjectRequest)
	if !ok {
		that2, ok := that.(GetObjectRequest)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := bytes.Compare(this.Key, that1.Key); c != 0 {
		return c
	}
	return 0
}
func (this *GetObjectResponse) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*GetObjectResponse)
	if !ok {
		that2, ok := that.(GetObjectResponse)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := bytes.Compare(this.Data, that1.Data); c != 0 {
		return c
	}
	if len(this.ReferenceList) != len(that1.ReferenceList) {
		if len(this.ReferenceList) < len(that1.ReferenceList) {
			return -1
		}
		return 1
	}
	for i := range this.ReferenceList {
		if this.ReferenceList[i] != that1.ReferenceList[i] {
			if this.ReferenceList[i] < that1.ReferenceList[i] {
				return -1
			}
			return 1
		}
	}
	return 0
}
func (this *DeleteObjectRequest) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*DeleteObjectRequest)
	if !ok {
		that2, ok := that.(DeleteObjectRequest)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := bytes.Compare(this.Key, that1.Key); c != 0 {
		return c
	}
	return 0
}
func (this *DeleteObjectResponse) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*DeleteObjectResponse)
	if !ok {
		that2, ok := that.(DeleteObjectResponse)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	return 0
}
func (this *GetObjectStatusRequest) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*GetObjectStatusRequest)
	if !ok {
		that2, ok := that.(GetObjectStatusRequest)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := bytes.Compare(this.Key, that1.Key); c != 0 {
		return c
	}
	return 0
}
func (this *GetObjectStatusResponse) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*GetObjectStatusResponse)
	if !ok {
		that2, ok := that.(GetObjectStatusResponse)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Status != that1.Status {
		if this.Status < that1.Status {
			return -1
		}
		return 1
	}
	return 0
}
func (this *ListObjectKeysRequest) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*ListObjectKeysRequest)
	if !ok {
		that2, ok := that.(ListObjectKeysRequest)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	return 0
}
func (this *ListObjectKeysResponse) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*ListObjectKeysResponse)
	if !ok {
		that2, ok := that.(ListObjectKeysResponse)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := bytes.Compare(this.Key, that1.Key); c != 0 {
		return c
	}
	return 0
}
func (this *SetReferenceListRequest) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*SetReferenceListRequest)
	if !ok {
		that2, ok := that.(SetReferenceListRequest)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := bytes.Compare(this.Key, that1.Key); c != 0 {
		return c
	}
	if len(this.ReferenceList) != len(that1.ReferenceList) {
		if len(this.ReferenceList) < len(that1.ReferenceList) {
			return -1
		}
		return 1
	}
	for i := range this.ReferenceList {
		if this.ReferenceList[i] != that1.ReferenceList[i] {
			if this.ReferenceList[i] < that1.ReferenceList[i] {
				return -1
			}
			return 1
		}
	}
	return 0
}
func (this *SetReferenceListResponse) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*SetReferenceListResponse)
	if !ok {
		that2, ok := that.(SetReferenceListResponse)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	return 0
}
func (this *GetReferenceListRequest) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*GetReferenceListRequest)
	if !ok {
		that2, ok := that.(GetReferenceListRequest)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := bytes.Compare(this.Key, that1.Key); c != 0 {
		return c
	}
	return 0
}
func (this *GetReferenceListResponse) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*GetReferenceListResponse)
	if !ok {
		that2, ok := that.(GetReferenceListResponse)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if len(this.ReferenceList) != len(that1.ReferenceList) {
		if len(this.ReferenceList) < len(that1.ReferenceList) {
			return -1
		}
		return 1
	}
	for i := range this.ReferenceList {
		if this.ReferenceList[i] != that1.ReferenceList[i] {
			if this.ReferenceList[i] < that1.ReferenceList[i] {
				return -1
			}
			return 1
		}
	}
	return 0
}
func (this *GetReferenceCountRequest) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*GetReferenceCountRequest)
	if !ok {
		that2, ok := that.(GetReferenceCountRequest)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := bytes.Compare(this.Key, that1.Key); c != 0 {
		return c
	}
	return 0
}
func (this *GetReferenceCountResponse) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*GetReferenceCountResponse)
	if !ok {
		that2, ok := that.(GetReferenceCountResponse)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Count != that1.Count {
		if this.Count < that1.Count {
			return -1
		}
		return 1
	}
	return 0
}
func (this *AppendToReferenceListRequest) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*AppendToReferenceListRequest)
	if !ok {
		that2, ok := that.(AppendToReferenceListRequest)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := bytes.Compare(this.Key, that1.Key); c != 0 {
		return c
	}
	if len(this.ReferenceList) != len(that1.ReferenceList) {
		if len(this.ReferenceList) < len(that1.ReferenceList) {
			return -1
		}
		return 1
	}
	for i := range this.ReferenceList {
		if this.ReferenceList[i] != that1.ReferenceList[i] {
			if this.ReferenceList[i] < that1.ReferenceList[i] {
				return -1
			}
			return 1
		}
	}
	return 0
}
func (this *AppendToReferenceListResponse) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*AppendToReferenceListResponse)
	if !ok {
		that2, ok := that.(AppendToReferenceListResponse)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	return 0
}
func (this *DeleteFromReferenceListRequest) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*DeleteFromReferenceListRequest)
	if !ok {
		that2, ok := that.(DeleteFromReferenceListRequest)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := bytes.Compare(this.Key, that1.Key); c != 0 {
		return c
	}
	if len(this.ReferenceList) != len(that1.ReferenceList) {
		if len(this.ReferenceList) < len(that1.ReferenceList) {
			return -1
		}
		return 1
	}
	for i := range this.ReferenceList {
		if this.ReferenceList[i] != that1.ReferenceList[i] {
			if this.ReferenceList[i] < that1.ReferenceList[i] {
				return -1
			}
			return 1
		}
	}
	return 0
}
func (this *DeleteFromReferenceListResponse) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*DeleteFromReferenceListResponse)
	if !ok {
		that2, ok := that.(DeleteFromReferenceListResponse)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if this.Count != that1.Count {
		if this.Count < that1.Count {
			return -1
		}
		return 1
	}
	return 0
}
func (this *DeleteReferenceListRequest) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*DeleteReferenceListRequest)
	if !ok {
		that2, ok := that.(DeleteReferenceListRequest)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	if c := bytes.Compare(this.Key, that1.Key); c != 0 {
		return c
	}
	return 0
}
func (this *DeleteReferenceListResponse) Compare(that interface{}) int {
	if that == nil {
		if this == nil {
			return 0
		}
		return 1
	}

	that1, ok := that.(*DeleteReferenceListResponse)
	if !ok {
		that2, ok := that.(DeleteReferenceListResponse)
		if ok {
			that1 = &that2
		} else {
			return 1
		}
	}
	if that1 == nil {
		if this == nil {
			return 0
		}
		return 1
	} else if this == nil {
		return -1
	}
	return 0
}
func (x ObjectStatus) String() string {
	s, ok := ObjectStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GetNamespaceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetNamespaceRequest)
	if !ok {
		that2, ok := that.(GetNamespaceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetNamespaceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetNamespaceResponse)
	if !ok {
		that2, ok := that.(GetNamespaceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if this.ReadRequestPerHour != that1.ReadRequestPerHour {
		return false
	}
	if this.WriteRequestPerHour != that1.WriteRequestPerHour {
		return false
	}
	if this.NrObjects != that1.NrObjects {
		return false
	}
	return true
}
func (this *SetObjectRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetObjectRequest)
	if !ok {
		that2, ok := that.(SetObjectRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if len(this.ReferenceList) != len(that1.ReferenceList) {
		return false
	}
	for i := range this.ReferenceList {
		if this.ReferenceList[i] != that1.ReferenceList[i] {
			return false
		}
	}
	return true
}
func (this *SetObjectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetObjectResponse)
	if !ok {
		that2, ok := that.(SetObjectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetObjectRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetObjectRequest)
	if !ok {
		that2, ok := that.(GetObjectRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	return true
}
func (this *GetObjectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetObjectResponse)
	if !ok {
		that2, ok := that.(GetObjectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if len(this.ReferenceList) != len(that1.ReferenceList) {
		return false
	}
	for i := range this.ReferenceList {
		if this.ReferenceList[i] != that1.ReferenceList[i] {
			return false
		}
	}
	return true
}
func (this *DeleteObjectRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteObjectRequest)
	if !ok {
		that2, ok := that.(DeleteObjectRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	return true
}
func (this *DeleteObjectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteObjectResponse)
	if !ok {
		that2, ok := that.(DeleteObjectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetObjectStatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetObjectStatusRequest)
	if !ok {
		that2, ok := that.(GetObjectStatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	return true
}
func (this *GetObjectStatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetObjectStatusResponse)
	if !ok {
		that2, ok := that.(GetObjectStatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *ListObjectKeysRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListObjectKeysRequest)
	if !ok {
		that2, ok := that.(ListObjectKeysRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ListObjectKeysResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListObjectKeysResponse)
	if !ok {
		that2, ok := that.(ListObjectKeysResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	return true
}
func (this *SetReferenceListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetReferenceListRequest)
	if !ok {
		that2, ok := that.(SetReferenceListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	if len(this.ReferenceList) != len(that1.ReferenceList) {
		return false
	}
	for i := range this.ReferenceList {
		if this.ReferenceList[i] != that1.ReferenceList[i] {
			return false
		}
	}
	return true
}
func (this *SetReferenceListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetReferenceListResponse)
	if !ok {
		that2, ok := that.(SetReferenceListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetReferenceListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetReferenceListRequest)
	if !ok {
		that2, ok := that.(GetReferenceListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	return true
}
func (this *GetReferenceListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetReferenceListResponse)
	if !ok {
		that2, ok := that.(GetReferenceListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ReferenceList) != len(that1.ReferenceList) {
		return false
	}
	for i := range this.ReferenceList {
		if this.ReferenceList[i] != that1.ReferenceList[i] {
			return false
		}
	}
	return true
}
func (this *GetReferenceCountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetReferenceCountRequest)
	if !ok {
		that2, ok := that.(GetReferenceCountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	return true
}
func (this *GetReferenceCountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetReferenceCountResponse)
	if !ok {
		that2, ok := that.(GetReferenceCountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *AppendToReferenceListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppendToReferenceListRequest)
	if !ok {
		that2, ok := that.(AppendToReferenceListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	if len(this.ReferenceList) != len(that1.ReferenceList) {
		return false
	}
	for i := range this.ReferenceList {
		if this.ReferenceList[i] != that1.ReferenceList[i] {
			return false
		}
	}
	return true
}
func (this *AppendToReferenceListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppendToReferenceListResponse)
	if !ok {
		that2, ok := that.(AppendToReferenceListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeleteFromReferenceListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteFromReferenceListRequest)
	if !ok {
		that2, ok := that.(DeleteFromReferenceListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	if len(this.ReferenceList) != len(that1.ReferenceList) {
		return false
	}
	for i := range this.ReferenceList {
		if this.ReferenceList[i] != that1.ReferenceList[i] {
			return false
		}
	}
	return true
}
func (this *DeleteFromReferenceListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteFromReferenceListResponse)
	if !ok {
		that2, ok := that.(DeleteFromReferenceListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *DeleteReferenceListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteReferenceListRequest)
	if !ok {
		that2, ok := that.(DeleteReferenceListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	return true
}
func (this *DeleteReferenceListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteReferenceListResponse)
	if !ok {
		that2, ok := that.(DeleteReferenceListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetNamespaceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&zstor.GetNamespaceRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetNamespaceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&zstor.GetNamespaceResponse{")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "ReadRequestPerHour: "+fmt.Sprintf("%#v", this.ReadRequestPerHour)+",\n")
	s = append(s, "WriteRequestPerHour: "+fmt.Sprintf("%#v", this.WriteRequestPerHour)+",\n")
	s = append(s, "NrObjects: "+fmt.Sprintf("%#v", this.NrObjects)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetObjectRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&zstor.SetObjectRequest{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "ReferenceList: "+fmt.Sprintf("%#v", this.ReferenceList)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetObjectResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&zstor.SetObjectResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetObjectRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&zstor.GetObjectRequest{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetObjectResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&zstor.GetObjectResponse{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "ReferenceList: "+fmt.Sprintf("%#v", this.ReferenceList)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteObjectRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&zstor.DeleteObjectRequest{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteObjectResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&zstor.DeleteObjectResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetObjectStatusRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&zstor.GetObjectStatusRequest{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetObjectStatusResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&zstor.GetObjectStatusResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListObjectKeysRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&zstor.ListObjectKeysRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListObjectKeysResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&zstor.ListObjectKeysResponse{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetReferenceListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&zstor.SetReferenceListRequest{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "ReferenceList: "+fmt.Sprintf("%#v", this.ReferenceList)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetReferenceListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&zstor.SetReferenceListResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetReferenceListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&zstor.GetReferenceListRequest{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetReferenceListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&zstor.GetReferenceListResponse{")
	s = append(s, "ReferenceList: "+fmt.Sprintf("%#v", this.ReferenceList)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetReferenceCountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&zstor.GetReferenceCountRequest{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetReferenceCountResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&zstor.GetReferenceCountResponse{")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AppendToReferenceListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&zstor.AppendToReferenceListRequest{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "ReferenceList: "+fmt.Sprintf("%#v", this.ReferenceList)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AppendToReferenceListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&zstor.AppendToReferenceListResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteFromReferenceListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&zstor.DeleteFromReferenceListRequest{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "ReferenceList: "+fmt.Sprintf("%#v", this.ReferenceList)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteFromReferenceListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&zstor.DeleteFromReferenceListResponse{")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteReferenceListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&zstor.DeleteReferenceListRequest{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteReferenceListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&zstor.DeleteReferenceListResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringZstor(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NamespaceManager service

type NamespaceManagerClient interface {
	// GetNamespace gets all available information about
	// a requested namespace. Most of the information returned,
	// is not stored in persistent memory,
	// and instead computed on the fly or available
	// from the in-memory cache.
	GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error)
}

type namespaceManagerClient struct {
	cc *grpc.ClientConn
}

func NewNamespaceManagerClient(cc *grpc.ClientConn) NamespaceManagerClient {
	return &namespaceManagerClient{cc}
}

func (c *namespaceManagerClient) GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error) {
	out := new(GetNamespaceResponse)
	err := grpc.Invoke(ctx, "/NamespaceManager/GetNamespace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NamespaceManager service

type NamespaceManagerServer interface {
	// GetNamespace gets all available information about
	// a requested namespace. Most of the information returned,
	// is not stored in persistent memory,
	// and instead computed on the fly or available
	// from the in-memory cache.
	GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error)
}

func RegisterNamespaceManagerServer(s *grpc.Server, srv NamespaceManagerServer) {
	s.RegisterService(&_NamespaceManager_serviceDesc, srv)
}

func _NamespaceManager_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceManagerServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NamespaceManager/GetNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceManagerServer).GetNamespace(ctx, req.(*GetNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NamespaceManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NamespaceManager",
	HandlerType: (*NamespaceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNamespace",
			Handler:    _NamespaceManager_GetNamespace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema/zstor.proto",
}

// Client API for ObjectManager service

type ObjectManagerClient interface {
	// Set an object, either overwriting an existing key,
	// or creating a new one.
	// If no reference list is given, no (stored) reference list is touched.
	SetObject(ctx context.Context, in *SetObjectRequest, opts ...grpc.CallOption) (*SetObjectResponse, error)
	// Get an existing object, linked to a given key.
	GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error)
	// DeleteObject deletes an object.
	// Deleting an non-existing object is considered valid.
	DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error)
	// GetObjectStatus returns the status of an object,
	// indicating whether it's OK, missing or corrupt.
	GetObjectStatus(ctx context.Context, in *GetObjectStatusRequest, opts ...grpc.CallOption) (*GetObjectStatusResponse, error)
	// ListObjectKeys lists the keys of
	// all stored objects within the namespace (identified by the given label).
	ListObjectKeys(ctx context.Context, in *ListObjectKeysRequest, opts ...grpc.CallOption) (ObjectManager_ListObjectKeysClient, error)
	// SetReferenceList allows you to create a new reference list
	// or overwrite an existing reference list,
	// for a given object.
	SetReferenceList(ctx context.Context, in *SetReferenceListRequest, opts ...grpc.CallOption) (*SetReferenceListResponse, error)
	// GetReferenceList returns an existing reference list
	// for a given object.
	GetReferenceList(ctx context.Context, in *GetReferenceListRequest, opts ...grpc.CallOption) (*GetReferenceListResponse, error)
	// GetReferenceCount returns the amount of references stored for the given object.
	GetReferenceCount(ctx context.Context, in *GetReferenceCountRequest, opts ...grpc.CallOption) (*GetReferenceCountResponse, error)
	// AppendReferenceList appends the given references
	// to the end of the reference list of the given object.
	// If no reference list existed for this object prior to this call,
	// this method will behave the same as SetReferenceList.
	AppendToReferenceList(ctx context.Context, in *AppendToReferenceListRequest, opts ...grpc.CallOption) (*AppendToReferenceListResponse, error)
	// DeleteFromReferenceList deletes the references of the given list,
	// from the references of the existing list.
	// In case deleted succesfully, it will also return the new count of the list,
	// as part of the response.
	DeleteFromReferenceList(ctx context.Context, in *DeleteFromReferenceListRequest, opts ...grpc.CallOption) (*DeleteFromReferenceListResponse, error)
	// DeleteReferenceList deletes entirely stored reference list.
	// If no reference list was stored for the object prior to this call, nothing will happen.
	DeleteReferenceList(ctx context.Context, in *DeleteReferenceListRequest, opts ...grpc.CallOption) (*DeleteReferenceListResponse, error)
}

type objectManagerClient struct {
	cc *grpc.ClientConn
}

func NewObjectManagerClient(cc *grpc.ClientConn) ObjectManagerClient {
	return &objectManagerClient{cc}
}

func (c *objectManagerClient) SetObject(ctx context.Context, in *SetObjectRequest, opts ...grpc.CallOption) (*SetObjectResponse, error) {
	out := new(SetObjectResponse)
	err := grpc.Invoke(ctx, "/ObjectManager/SetObject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectManagerClient) GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error) {
	out := new(GetObjectResponse)
	err := grpc.Invoke(ctx, "/ObjectManager/GetObject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectManagerClient) DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error) {
	out := new(DeleteObjectResponse)
	err := grpc.Invoke(ctx, "/ObjectManager/DeleteObject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectManagerClient) GetObjectStatus(ctx context.Context, in *GetObjectStatusRequest, opts ...grpc.CallOption) (*GetObjectStatusResponse, error) {
	out := new(GetObjectStatusResponse)
	err := grpc.Invoke(ctx, "/ObjectManager/GetObjectStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectManagerClient) ListObjectKeys(ctx context.Context, in *ListObjectKeysRequest, opts ...grpc.CallOption) (ObjectManager_ListObjectKeysClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ObjectManager_serviceDesc.Streams[0], c.cc, "/ObjectManager/ListObjectKeys", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectManagerListObjectKeysClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectManager_ListObjectKeysClient interface {
	Recv() (*ListObjectKeysResponse, error)
	grpc.ClientStream
}

type objectManagerListObjectKeysClient struct {
	grpc.ClientStream
}

func (x *objectManagerListObjectKeysClient) Recv() (*ListObjectKeysResponse, error) {
	m := new(ListObjectKeysResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectManagerClient) SetReferenceList(ctx context.Context, in *SetReferenceListRequest, opts ...grpc.CallOption) (*SetReferenceListResponse, error) {
	out := new(SetReferenceListResponse)
	err := grpc.Invoke(ctx, "/ObjectManager/SetReferenceList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectManagerClient) GetReferenceList(ctx context.Context, in *GetReferenceListRequest, opts ...grpc.CallOption) (*GetReferenceListResponse, error) {
	out := new(GetReferenceListResponse)
	err := grpc.Invoke(ctx, "/ObjectManager/GetReferenceList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectManagerClient) GetReferenceCount(ctx context.Context, in *GetReferenceCountRequest, opts ...grpc.CallOption) (*GetReferenceCountResponse, error) {
	out := new(GetReferenceCountResponse)
	err := grpc.Invoke(ctx, "/ObjectManager/GetReferenceCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectManagerClient) AppendToReferenceList(ctx context.Context, in *AppendToReferenceListRequest, opts ...grpc.CallOption) (*AppendToReferenceListResponse, error) {
	out := new(AppendToReferenceListResponse)
	err := grpc.Invoke(ctx, "/ObjectManager/AppendToReferenceList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectManagerClient) DeleteFromReferenceList(ctx context.Context, in *DeleteFromReferenceListRequest, opts ...grpc.CallOption) (*DeleteFromReferenceListResponse, error) {
	out := new(DeleteFromReferenceListResponse)
	err := grpc.Invoke(ctx, "/ObjectManager/DeleteFromReferenceList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectManagerClient) DeleteReferenceList(ctx context.Context, in *DeleteReferenceListRequest, opts ...grpc.CallOption) (*DeleteReferenceListResponse, error) {
	out := new(DeleteReferenceListResponse)
	err := grpc.Invoke(ctx, "/ObjectManager/DeleteReferenceList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ObjectManager service

type ObjectManagerServer interface {
	// Set an object, either overwriting an existing key,
	// or creating a new one.
	// If no reference list is given, no (stored) reference list is touched.
	SetObject(context.Context, *SetObjectRequest) (*SetObjectResponse, error)
	// Get an existing object, linked to a given key.
	GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error)
	// DeleteObject deletes an object.
	// Deleting an non-existing object is considered valid.
	DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error)
	// GetObjectStatus returns the status of an object,
	// indicating whether it's OK, missing or corrupt.
	GetObjectStatus(context.Context, *GetObjectStatusRequest) (*GetObjectStatusResponse, error)
	// ListObjectKeys lists the keys of
	// all stored objects within the namespace (identified by the given label).
	ListObjectKeys(*ListObjectKeysRequest, ObjectManager_ListObjectKeysServer) error
	// SetReferenceList allows you to create a new reference list
	// or overwrite an existing reference list,
	// for a given object.
	SetReferenceList(context.Context, *SetReferenceListRequest) (*SetReferenceListResponse, error)
	// GetReferenceList returns an existing reference list
	// for a given object.
	GetReferenceList(context.Context, *GetReferenceListRequest) (*GetReferenceListResponse, error)
	// GetReferenceCount returns the amount of references stored for the given object.
	GetReferenceCount(context.Context, *GetReferenceCountRequest) (*GetReferenceCountResponse, error)
	// AppendReferenceList appends the given references
	// to the end of the reference list of the given object.
	// If no reference list existed for this object prior to this call,
	// this method will behave the same as SetReferenceList.
	AppendToReferenceList(context.Context, *AppendToReferenceListRequest) (*AppendToReferenceListResponse, error)
	// DeleteFromReferenceList deletes the references of the given list,
	// from the references of the existing list.
	// In case deleted succesfully, it will also return the new count of the list,
	// as part of the response.
	DeleteFromReferenceList(context.Context, *DeleteFromReferenceListRequest) (*DeleteFromReferenceListResponse, error)
	// DeleteReferenceList deletes entirely stored reference list.
	// If no reference list was stored for the object prior to this call, nothing will happen.
	DeleteReferenceList(context.Context, *DeleteReferenceListRequest) (*DeleteReferenceListResponse, error)
}

func RegisterObjectManagerServer(s *grpc.Server, srv ObjectManagerServer) {
	s.RegisterService(&_ObjectManager_serviceDesc, srv)
}

func _ObjectManager_SetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectManagerServer).SetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectManager/SetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectManagerServer).SetObject(ctx, req.(*SetObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectManager_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectManagerServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectManager/GetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectManagerServer).GetObject(ctx, req.(*GetObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectManager_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectManagerServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectManager/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectManagerServer).DeleteObject(ctx, req.(*DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectManager_GetObjectStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectManagerServer).GetObjectStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectManager/GetObjectStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectManagerServer).GetObjectStatus(ctx, req.(*GetObjectStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectManager_ListObjectKeys_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListObjectKeysRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectManagerServer).ListObjectKeys(m, &objectManagerListObjectKeysServer{stream})
}

type ObjectManager_ListObjectKeysServer interface {
	Send(*ListObjectKeysResponse) error
	grpc.ServerStream
}

type objectManagerListObjectKeysServer struct {
	grpc.ServerStream
}

func (x *objectManagerListObjectKeysServer) Send(m *ListObjectKeysResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjectManager_SetReferenceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReferenceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectManagerServer).SetReferenceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectManager/SetReferenceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectManagerServer).SetReferenceList(ctx, req.(*SetReferenceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectManager_GetReferenceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReferenceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectManagerServer).GetReferenceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectManager/GetReferenceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectManagerServer).GetReferenceList(ctx, req.(*GetReferenceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectManager_GetReferenceCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReferenceCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectManagerServer).GetReferenceCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectManager/GetReferenceCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectManagerServer).GetReferenceCount(ctx, req.(*GetReferenceCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectManager_AppendToReferenceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendToReferenceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectManagerServer).AppendToReferenceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectManager/AppendToReferenceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectManagerServer).AppendToReferenceList(ctx, req.(*AppendToReferenceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectManager_DeleteFromReferenceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFromReferenceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectManagerServer).DeleteFromReferenceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectManager/DeleteFromReferenceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectManagerServer).DeleteFromReferenceList(ctx, req.(*DeleteFromReferenceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectManager_DeleteReferenceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReferenceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectManagerServer).DeleteReferenceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectManager/DeleteReferenceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectManagerServer).DeleteReferenceList(ctx, req.(*DeleteReferenceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ObjectManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ObjectManager",
	HandlerType: (*ObjectManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetObject",
			Handler:    _ObjectManager_SetObject_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _ObjectManager_GetObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _ObjectManager_DeleteObject_Handler,
		},
		{
			MethodName: "GetObjectStatus",
			Handler:    _ObjectManager_GetObjectStatus_Handler,
		},
		{
			MethodName: "SetReferenceList",
			Handler:    _ObjectManager_SetReferenceList_Handler,
		},
		{
			MethodName: "GetReferenceList",
			Handler:    _ObjectManager_GetReferenceList_Handler,
		},
		{
			MethodName: "GetReferenceCount",
			Handler:    _ObjectManager_GetReferenceCount_Handler,
		},
		{
			MethodName: "AppendToReferenceList",
			Handler:    _ObjectManager_AppendToReferenceList_Handler,
		},
		{
			MethodName: "DeleteFromReferenceList",
			Handler:    _ObjectManager_DeleteFromReferenceList_Handler,
		},
		{
			MethodName: "DeleteReferenceList",
			Handler:    _ObjectManager_DeleteReferenceList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListObjectKeys",
			Handler:       _ObjectManager_ListObjectKeys_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "schema/zstor.proto",
}

func (m *GetNamespaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNamespaceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetNamespaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNamespaceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Label) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintZstor(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if m.ReadRequestPerHour != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintZstor(dAtA, i, uint64(m.ReadRequestPerHour))
	}
	if m.WriteRequestPerHour != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintZstor(dAtA, i, uint64(m.WriteRequestPerHour))
	}
	if m.NrObjects != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintZstor(dAtA, i, uint64(m.NrObjects))
	}
	return i, nil
}

func (m *SetObjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetObjectRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintZstor(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintZstor(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.ReferenceList) > 0 {
		for _, s := range m.ReferenceList {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *SetObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetObjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetObjectRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintZstor(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *GetObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintZstor(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.ReferenceList) > 0 {
		for _, s := range m.ReferenceList {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *DeleteObjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteObjectRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintZstor(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *DeleteObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetObjectStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetObjectStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintZstor(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *GetObjectStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetObjectStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZstor(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *ListObjectKeysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListObjectKeysRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ListObjectKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListObjectKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintZstor(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *SetReferenceListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetReferenceListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintZstor(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.ReferenceList) > 0 {
		for _, s := range m.ReferenceList {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *SetReferenceListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetReferenceListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetReferenceListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReferenceListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintZstor(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *GetReferenceListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReferenceListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ReferenceList) > 0 {
		for _, s := range m.ReferenceList {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GetReferenceCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReferenceCountRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintZstor(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *GetReferenceCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReferenceCountResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZstor(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *AppendToReferenceListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppendToReferenceListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintZstor(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.ReferenceList) > 0 {
		for _, s := range m.ReferenceList {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *AppendToReferenceListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppendToReferenceListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeleteFromReferenceListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteFromReferenceListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintZstor(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.ReferenceList) > 0 {
		for _, s := range m.ReferenceList {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *DeleteFromReferenceListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteFromReferenceListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZstor(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *DeleteReferenceListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteReferenceListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintZstor(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *DeleteReferenceListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteReferenceListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintZstor(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedGetNamespaceRequest(r randyZstor, easy bool) *GetNamespaceRequest {
	this := &GetNamespaceRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetNamespaceResponse(r randyZstor, easy bool) *GetNamespaceResponse {
	this := &GetNamespaceResponse{}
	this.Label = string(randStringZstor(r))
	this.ReadRequestPerHour = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ReadRequestPerHour *= -1
	}
	this.WriteRequestPerHour = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.WriteRequestPerHour *= -1
	}
	this.NrObjects = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.NrObjects *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetObjectRequest(r randyZstor, easy bool) *SetObjectRequest {
	this := &SetObjectRequest{}
	v1 := r.Intn(100)
	this.Key = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Key[i] = byte(r.Intn(256))
	}
	v2 := r.Intn(100)
	this.Data = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	v3 := r.Intn(10)
	this.ReferenceList = make([]string, v3)
	for i := 0; i < v3; i++ {
		this.ReferenceList[i] = string(randStringZstor(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetObjectResponse(r randyZstor, easy bool) *SetObjectResponse {
	this := &SetObjectResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetObjectRequest(r randyZstor, easy bool) *GetObjectRequest {
	this := &GetObjectRequest{}
	v4 := r.Intn(100)
	this.Key = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.Key[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetObjectResponse(r randyZstor, easy bool) *GetObjectResponse {
	this := &GetObjectResponse{}
	v5 := r.Intn(100)
	this.Data = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	v6 := r.Intn(10)
	this.ReferenceList = make([]string, v6)
	for i := 0; i < v6; i++ {
		this.ReferenceList[i] = string(randStringZstor(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteObjectRequest(r randyZstor, easy bool) *DeleteObjectRequest {
	this := &DeleteObjectRequest{}
	v7 := r.Intn(100)
	this.Key = make([]byte, v7)
	for i := 0; i < v7; i++ {
		this.Key[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteObjectResponse(r randyZstor, easy bool) *DeleteObjectResponse {
	this := &DeleteObjectResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetObjectStatusRequest(r randyZstor, easy bool) *GetObjectStatusRequest {
	this := &GetObjectStatusRequest{}
	v8 := r.Intn(100)
	this.Key = make([]byte, v8)
	for i := 0; i < v8; i++ {
		this.Key[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetObjectStatusResponse(r randyZstor, easy bool) *GetObjectStatusResponse {
	this := &GetObjectStatusResponse{}
	this.Status = ObjectStatus([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListObjectKeysRequest(r randyZstor, easy bool) *ListObjectKeysRequest {
	this := &ListObjectKeysRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListObjectKeysResponse(r randyZstor, easy bool) *ListObjectKeysResponse {
	this := &ListObjectKeysResponse{}
	v9 := r.Intn(100)
	this.Key = make([]byte, v9)
	for i := 0; i < v9; i++ {
		this.Key[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetReferenceListRequest(r randyZstor, easy bool) *SetReferenceListRequest {
	this := &SetReferenceListRequest{}
	v10 := r.Intn(100)
	this.Key = make([]byte, v10)
	for i := 0; i < v10; i++ {
		this.Key[i] = byte(r.Intn(256))
	}
	v11 := r.Intn(10)
	this.ReferenceList = make([]string, v11)
	for i := 0; i < v11; i++ {
		this.ReferenceList[i] = string(randStringZstor(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetReferenceListResponse(r randyZstor, easy bool) *SetReferenceListResponse {
	this := &SetReferenceListResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetReferenceListRequest(r randyZstor, easy bool) *GetReferenceListRequest {
	this := &GetReferenceListRequest{}
	v12 := r.Intn(100)
	this.Key = make([]byte, v12)
	for i := 0; i < v12; i++ {
		this.Key[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetReferenceListResponse(r randyZstor, easy bool) *GetReferenceListResponse {
	this := &GetReferenceListResponse{}
	v13 := r.Intn(10)
	this.ReferenceList = make([]string, v13)
	for i := 0; i < v13; i++ {
		this.ReferenceList[i] = string(randStringZstor(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetReferenceCountRequest(r randyZstor, easy bool) *GetReferenceCountRequest {
	this := &GetReferenceCountRequest{}
	v14 := r.Intn(100)
	this.Key = make([]byte, v14)
	for i := 0; i < v14; i++ {
		this.Key[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetReferenceCountResponse(r randyZstor, easy bool) *GetReferenceCountResponse {
	this := &GetReferenceCountResponse{}
	this.Count = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Count *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAppendToReferenceListRequest(r randyZstor, easy bool) *AppendToReferenceListRequest {
	this := &AppendToReferenceListRequest{}
	v15 := r.Intn(100)
	this.Key = make([]byte, v15)
	for i := 0; i < v15; i++ {
		this.Key[i] = byte(r.Intn(256))
	}
	v16 := r.Intn(10)
	this.ReferenceList = make([]string, v16)
	for i := 0; i < v16; i++ {
		this.ReferenceList[i] = string(randStringZstor(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAppendToReferenceListResponse(r randyZstor, easy bool) *AppendToReferenceListResponse {
	this := &AppendToReferenceListResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteFromReferenceListRequest(r randyZstor, easy bool) *DeleteFromReferenceListRequest {
	this := &DeleteFromReferenceListRequest{}
	v17 := r.Intn(100)
	this.Key = make([]byte, v17)
	for i := 0; i < v17; i++ {
		this.Key[i] = byte(r.Intn(256))
	}
	v18 := r.Intn(10)
	this.ReferenceList = make([]string, v18)
	for i := 0; i < v18; i++ {
		this.ReferenceList[i] = string(randStringZstor(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteFromReferenceListResponse(r randyZstor, easy bool) *DeleteFromReferenceListResponse {
	this := &DeleteFromReferenceListResponse{}
	this.Count = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Count *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteReferenceListRequest(r randyZstor, easy bool) *DeleteReferenceListRequest {
	this := &DeleteReferenceListRequest{}
	v19 := r.Intn(100)
	this.Key = make([]byte, v19)
	for i := 0; i < v19; i++ {
		this.Key[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteReferenceListResponse(r randyZstor, easy bool) *DeleteReferenceListResponse {
	this := &DeleteReferenceListResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyZstor interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneZstor(r randyZstor) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringZstor(r randyZstor) string {
	v20 := r.Intn(100)
	tmps := make([]rune, v20)
	for i := 0; i < v20; i++ {
		tmps[i] = randUTF8RuneZstor(r)
	}
	return string(tmps)
}
func randUnrecognizedZstor(r randyZstor, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldZstor(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldZstor(dAtA []byte, r randyZstor, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateZstor(dAtA, uint64(key))
		v21 := r.Int63()
		if r.Intn(2) == 0 {
			v21 *= -1
		}
		dAtA = encodeVarintPopulateZstor(dAtA, uint64(v21))
	case 1:
		dAtA = encodeVarintPopulateZstor(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateZstor(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateZstor(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateZstor(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateZstor(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GetNamespaceRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetNamespaceResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovZstor(uint64(l))
	}
	if m.ReadRequestPerHour != 0 {
		n += 1 + sovZstor(uint64(m.ReadRequestPerHour))
	}
	if m.WriteRequestPerHour != 0 {
		n += 1 + sovZstor(uint64(m.WriteRequestPerHour))
	}
	if m.NrObjects != 0 {
		n += 1 + sovZstor(uint64(m.NrObjects))
	}
	return n
}

func (m *SetObjectRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovZstor(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovZstor(uint64(l))
	}
	if len(m.ReferenceList) > 0 {
		for _, s := range m.ReferenceList {
			l = len(s)
			n += 1 + l + sovZstor(uint64(l))
		}
	}
	return n
}

func (m *SetObjectResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetObjectRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovZstor(uint64(l))
	}
	return n
}

func (m *GetObjectResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovZstor(uint64(l))
	}
	if len(m.ReferenceList) > 0 {
		for _, s := range m.ReferenceList {
			l = len(s)
			n += 1 + l + sovZstor(uint64(l))
		}
	}
	return n
}

func (m *DeleteObjectRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovZstor(uint64(l))
	}
	return n
}

func (m *DeleteObjectResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetObjectStatusRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovZstor(uint64(l))
	}
	return n
}

func (m *GetObjectStatusResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovZstor(uint64(m.Status))
	}
	return n
}

func (m *ListObjectKeysRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ListObjectKeysResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovZstor(uint64(l))
	}
	return n
}

func (m *SetReferenceListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovZstor(uint64(l))
	}
	if len(m.ReferenceList) > 0 {
		for _, s := range m.ReferenceList {
			l = len(s)
			n += 1 + l + sovZstor(uint64(l))
		}
	}
	return n
}

func (m *SetReferenceListResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetReferenceListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovZstor(uint64(l))
	}
	return n
}

func (m *GetReferenceListResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.ReferenceList) > 0 {
		for _, s := range m.ReferenceList {
			l = len(s)
			n += 1 + l + sovZstor(uint64(l))
		}
	}
	return n
}

func (m *GetReferenceCountRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovZstor(uint64(l))
	}
	return n
}

func (m *GetReferenceCountResponse) Size() (n int) {
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovZstor(uint64(m.Count))
	}
	return n
}

func (m *AppendToReferenceListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovZstor(uint64(l))
	}
	if len(m.ReferenceList) > 0 {
		for _, s := range m.ReferenceList {
			l = len(s)
			n += 1 + l + sovZstor(uint64(l))
		}
	}
	return n
}

func (m *AppendToReferenceListResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeleteFromReferenceListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovZstor(uint64(l))
	}
	if len(m.ReferenceList) > 0 {
		for _, s := range m.ReferenceList {
			l = len(s)
			n += 1 + l + sovZstor(uint64(l))
		}
	}
	return n
}

func (m *DeleteFromReferenceListResponse) Size() (n int) {
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovZstor(uint64(m.Count))
	}
	return n
}

func (m *DeleteReferenceListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovZstor(uint64(l))
	}
	return n
}

func (m *DeleteReferenceListResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovZstor(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozZstor(x uint64) (n int) {
	return sovZstor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetNamespaceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetNamespaceRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetNamespaceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetNamespaceResponse{`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`ReadRequestPerHour:` + fmt.Sprintf("%v", this.ReadRequestPerHour) + `,`,
		`WriteRequestPerHour:` + fmt.Sprintf("%v", this.WriteRequestPerHour) + `,`,
		`NrObjects:` + fmt.Sprintf("%v", this.NrObjects) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetObjectRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetObjectRequest{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`ReferenceList:` + fmt.Sprintf("%v", this.ReferenceList) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetObjectResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetObjectResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetObjectRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetObjectRequest{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetObjectResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetObjectResponse{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`ReferenceList:` + fmt.Sprintf("%v", this.ReferenceList) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteObjectRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteObjectRequest{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteObjectResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteObjectResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetObjectStatusRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetObjectStatusRequest{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetObjectStatusResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetObjectStatusResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListObjectKeysRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListObjectKeysRequest{`,
		`}`,
	}, "")
	return s
}
func (this *ListObjectKeysResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListObjectKeysResponse{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetReferenceListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetReferenceListRequest{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`ReferenceList:` + fmt.Sprintf("%v", this.ReferenceList) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetReferenceListResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetReferenceListResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetReferenceListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetReferenceListRequest{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetReferenceListResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetReferenceListResponse{`,
		`ReferenceList:` + fmt.Sprintf("%v", this.ReferenceList) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetReferenceCountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetReferenceCountRequest{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetReferenceCountResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetReferenceCountResponse{`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppendToReferenceListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppendToReferenceListRequest{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`ReferenceList:` + fmt.Sprintf("%v", this.ReferenceList) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppendToReferenceListResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppendToReferenceListResponse{`,
		`}`,
	}, "")
	return s
}
func (this *DeleteFromReferenceListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteFromReferenceListRequest{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`ReferenceList:` + fmt.Sprintf("%v", this.ReferenceList) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteFromReferenceListResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteFromReferenceListResponse{`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteReferenceListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteReferenceListRequest{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteReferenceListResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteReferenceListResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringZstor(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetNamespaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNamespaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNamespaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNamespaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNamespaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNamespaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZstor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadRequestPerHour", wireType)
			}
			m.ReadRequestPerHour = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadRequestPerHour |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteRequestPerHour", wireType)
			}
			m.WriteRequestPerHour = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WriteRequestPerHour |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NrObjects", wireType)
			}
			m.NrObjects = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NrObjects |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetObjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetObjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetObjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZstor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZstor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZstor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferenceList = append(m.ReferenceList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetObjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetObjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetObjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZstor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZstor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZstor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferenceList = append(m.ReferenceList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteObjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteObjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteObjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZstor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetObjectStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetObjectStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetObjectStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZstor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetObjectStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetObjectStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetObjectStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (ObjectStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListObjectKeysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListObjectKeysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListObjectKeysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListObjectKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListObjectKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListObjectKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZstor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetReferenceListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetReferenceListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetReferenceListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZstor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZstor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferenceList = append(m.ReferenceList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetReferenceListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetReferenceListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetReferenceListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReferenceListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReferenceListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReferenceListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZstor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReferenceListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReferenceListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReferenceListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZstor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferenceList = append(m.ReferenceList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReferenceCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReferenceCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReferenceCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZstor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReferenceCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReferenceCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReferenceCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppendToReferenceListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppendToReferenceListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppendToReferenceListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZstor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZstor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferenceList = append(m.ReferenceList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppendToReferenceListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppendToReferenceListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppendToReferenceListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteFromReferenceListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteFromReferenceListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteFromReferenceListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZstor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZstor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferenceList = append(m.ReferenceList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteFromReferenceListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteFromReferenceListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteFromReferenceListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteReferenceListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteReferenceListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteReferenceListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZstor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteReferenceListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteReferenceListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteReferenceListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipZstor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZstor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZstor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZstor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZstor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthZstor
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowZstor
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipZstor(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthZstor = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZstor   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("schema/zstor.proto", fileDescriptorZstor) }

var fileDescriptorZstor = []byte{
	// 820 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xbf, 0x4f, 0xdb, 0x4c,
	0x18, 0xc7, 0x7d, 0x09, 0x2f, 0xaf, 0xf2, 0x28, 0xf0, 0x86, 0x4b, 0x42, 0xcc, 0x01, 0x47, 0x64,
	0xf1, 0xaa, 0x11, 0x6d, 0x0f, 0x4a, 0x2b, 0x75, 0x29, 0x12, 0x2d, 0x2d, 0x6e, 0x05, 0x94, 0x62,
	0xaa, 0x8a, 0x09, 0xc9, 0x49, 0x8e, 0x90, 0x42, 0xe2, 0xd4, 0x76, 0x54, 0xc1, 0xd4, 0x99, 0xa9,
	0xff, 0x00, 0x3b, 0x43, 0xff, 0x80, 0x4a, 0x5d, 0x3a, 0x76, 0x64, 0xec, 0xd8, 0x98, 0xa5, 0x23,
	0x63, 0xc7, 0x2a, 0x67, 0x27, 0xd8, 0x89, 0x1d, 0x18, 0xd8, 0x7c, 0xcf, 0x8f, 0xef, 0xf3, 0xcd,
	0x63, 0xfb, 0xe3, 0x00, 0xb6, 0x4a, 0xfb, 0xbc, 0xa6, 0xcf, 0x1f, 0x5b, 0xb6, 0x61, 0xb2, 0x86,
	0x69, 0xd8, 0x06, 0xb9, 0x5f, 0xa9, 0xda, 0xfb, 0xcd, 0x22, 0x2b, 0x19, 0xb5, 0xf9, 0x8a, 0x51,
	0x31, 0xe6, 0x45, 0xb8, 0xd8, 0xdc, 0x13, 0x27, 0x71, 0x10, 0x57, 0x6e, 0xb9, 0x92, 0x85, 0xb4,
	0xca, 0xed, 0xd7, 0x7a, 0x8d, 0x5b, 0x0d, 0xbd, 0xc4, 0x35, 0xfe, 0xa1, 0xc9, 0x2d, 0x5b, 0xf9,
	0x82, 0x20, 0x13, 0x8c, 0x5b, 0x0d, 0xa3, 0x6e, 0x71, 0x9c, 0x81, 0x7f, 0x0e, 0xf5, 0x22, 0x3f,
	0x94, 0x51, 0x1e, 0x15, 0x12, 0x9a, 0x7b, 0xc0, 0x0c, 0xb0, 0xc9, 0xf5, 0xb2, 0xd7, 0xfd, 0x86,
	0x9b, 0x2f, 0x8d, 0xa6, 0x29, 0xc7, 0xf2, 0xa8, 0x10, 0xd7, 0x42, 0x32, 0x78, 0x01, 0xd2, 0x1f,
	0xcd, 0xaa, 0xcd, 0x7b, 0x1a, 0xe2, 0xa2, 0x21, 0x2c, 0x85, 0xa7, 0x20, 0x51, 0x37, 0x37, 0x8b,
	0xef, 0x79, 0xc9, 0xb6, 0xe4, 0x21, 0x51, 0x77, 0x15, 0x50, 0x76, 0x21, 0xb5, 0xcd, 0x6d, 0xf7,
	0xe4, 0x35, 0xe2, 0x14, 0xc4, 0x0f, 0xf8, 0x91, 0xf0, 0x99, 0xd4, 0xda, 0x97, 0x18, 0xc3, 0x50,
	0x59, 0xb7, 0x75, 0xe1, 0x2b, 0xa9, 0x89, 0x6b, 0x3c, 0x0b, 0x23, 0x26, 0xdf, 0xe3, 0x26, 0xaf,
	0x97, 0xf8, 0x7a, 0xd5, 0xb2, 0xe5, 0x78, 0x3e, 0x5e, 0x48, 0x68, 0xc1, 0xa0, 0x92, 0x86, 0x31,
	0x9f, 0xbe, 0xbb, 0x0a, 0x65, 0x16, 0x52, 0xea, 0xb5, 0x43, 0x95, 0x0d, 0x18, 0x53, 0x7b, 0x5b,
	0xbb, 0x4e, 0xd0, 0x20, 0x27, 0xb1, 0x30, 0x27, 0x77, 0x20, 0xfd, 0x9c, 0x1f, 0x72, 0x9b, 0x5f,
	0x37, 0x77, 0x1c, 0x32, 0xc1, 0x42, 0xcf, 0xf5, 0x1c, 0x8c, 0x77, 0xfd, 0x6c, 0xdb, 0xba, 0xdd,
	0xb4, 0xa2, 0x35, 0x96, 0x21, 0xd7, 0x57, 0xeb, 0xfd, 0x82, 0xff, 0x61, 0xd8, 0x12, 0x11, 0x51,
	0x3f, 0xba, 0x38, 0xc2, 0x02, 0x65, 0x5e, 0x52, 0xc9, 0x41, 0xb6, 0x6d, 0xdb, 0xcd, 0xad, 0xf1,
	0xa3, 0xce, 0xb0, 0xb6, 0x8d, 0xde, 0x84, 0xa7, 0xdc, 0x6f, 0x63, 0x0b, 0x72, 0xdb, 0xdc, 0xd6,
	0xfc, 0x7b, 0x88, 0xbe, 0xc9, 0x37, 0x5b, 0x23, 0x01, 0xb9, 0x5f, 0xd2, 0xdb, 0xd0, 0x5d, 0xf1,
	0xab, 0x6f, 0x36, 0x4e, 0x59, 0x06, 0x59, 0x8d, 0x10, 0xea, 0xb7, 0x82, 0xc2, 0xac, 0xdc, 0x0b,
	0x2a, 0xac, 0x18, 0xcd, 0xfa, 0x80, 0x79, 0x0f, 0x60, 0x22, 0xa4, 0xfa, 0xea, 0xe5, 0x2c, 0xb5,
	0x03, 0xa2, 0x21, 0xae, 0xb9, 0x07, 0xe5, 0x1d, 0x4c, 0x3d, 0x6d, 0x34, 0x78, 0xbd, 0xfc, 0xd6,
	0xb8, 0xd5, 0x1d, 0xce, 0xc0, 0x74, 0x84, 0xae, 0xb7, 0xc8, 0x1d, 0xa0, 0xee, 0x23, 0xb8, 0x6a,
	0x1a, 0xb5, 0x5b, 0x1d, 0xfd, 0x18, 0x66, 0x22, 0x95, 0x07, 0xee, 0x82, 0x01, 0x71, 0x1b, 0x6f,
	0x78, 0x7b, 0xa7, 0x61, 0x32, 0xb4, 0xde, 0x1d, 0x32, 0x77, 0x0c, 0x49, 0xff, 0x63, 0x8f, 0x67,
	0xe1, 0xdf, 0x5a, 0xd5, 0xb2, 0xaa, 0xf5, 0x4a, 0x4a, 0x22, 0xb9, 0x93, 0xd3, 0x7c, 0xda, 0x9f,
	0xde, 0x70, 0x53, 0x98, 0x40, 0xcc, 0x38, 0x48, 0x21, 0x82, 0x4f, 0x4e, 0xf3, 0xa3, 0xfe, 0x82,
	0xcd, 0x35, 0x5c, 0x80, 0x44, 0xc9, 0x30, 0xcd, 0x66, 0xc3, 0xe6, 0xe5, 0x54, 0x8c, 0x4c, 0x9c,
	0x9c, 0xe6, 0xb3, 0xfe, 0x92, 0x95, 0x4e, 0x72, 0x71, 0x0b, 0x52, 0x5d, 0x3c, 0x6f, 0xe8, 0x75,
	0xbd, 0xc2, 0x4d, 0xbc, 0x04, 0x49, 0x3f, 0xb5, 0x71, 0x86, 0x85, 0xc0, 0x9d, 0x64, 0x59, 0x18,
	0xda, 0x15, 0x69, 0xf1, 0xdb, 0x30, 0x8c, 0xb8, 0xc3, 0x3a, 0x82, 0x8f, 0x20, 0xd1, 0x05, 0x1f,
	0x1e, 0x63, 0xbd, 0x90, 0x25, 0x98, 0xf5, 0x73, 0x51, 0x6a, 0x77, 0xa9, 0xbe, 0x2e, 0xb5, 0xbf,
	0x4b, 0x0d, 0xe9, 0x5a, 0x82, 0xa4, 0x9f, 0x58, 0x38, 0xc3, 0x42, 0x48, 0x47, 0xb2, 0x2c, 0x14,
	0x6b, 0x12, 0x5e, 0x85, 0xff, 0x7a, 0x60, 0x85, 0x73, 0x2c, 0x1c, 0x75, 0x44, 0x66, 0x11, 0x5c,
	0x53, 0x24, 0xfc, 0x02, 0x46, 0x83, 0x64, 0xc2, 0xe3, 0x2c, 0x94, 0x61, 0x24, 0xc7, 0xc2, 0x11,
	0xa6, 0x48, 0x0b, 0x08, 0xbf, 0x12, 0x9f, 0xa4, 0xc0, 0x63, 0x83, 0x65, 0x16, 0xc1, 0x31, 0x32,
	0xc1, 0x22, 0x71, 0x24, 0xb5, 0xa5, 0xd4, 0x7e, 0x29, 0x35, 0x52, 0x4a, 0x8d, 0x96, 0x5a, 0x17,
	0x5f, 0xa3, 0x20, 0x3e, 0x70, 0xb0, 0xc3, 0x0f, 0x20, 0x42, 0x58, 0x24, 0x6d, 0x14, 0x09, 0xef,
	0x40, 0x36, 0x94, 0x00, 0x78, 0x9a, 0x0d, 0x22, 0x0e, 0xa1, 0x6c, 0x30, 0x38, 0x24, 0xbc, 0x0b,
	0xb9, 0x88, 0x17, 0x1c, 0xcf, 0xb0, 0xc1, 0x50, 0x21, 0x79, 0x76, 0x0d, 0x1b, 0x14, 0x09, 0x6b,
	0x9d, 0xcf, 0x68, 0x50, 0x7b, 0x92, 0x45, 0xd3, 0x81, 0x4c, 0xb1, 0x01, 0x28, 0x50, 0xa4, 0x67,
	0x4f, 0xce, 0x5b, 0x54, 0xfa, 0xd9, 0xa2, 0xd2, 0x65, 0x8b, 0xa2, 0x3f, 0x2d, 0x8a, 0x3e, 0x39,
	0x14, 0x9d, 0x39, 0x14, 0x7d, 0x75, 0x28, 0xfa, 0xee, 0x50, 0xf4, 0xc3, 0xa1, 0xe8, 0xdc, 0xa1,
	0xe8, 0x97, 0x43, 0xd1, 0x6f, 0x87, 0x4a, 0x97, 0x0e, 0x45, 0x9f, 0x2f, 0xa8, 0x74, 0x76, 0x41,
	0x51, 0x71, 0x58, 0xfc, 0x1f, 0x7b, 0xf8, 0x37, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x1e, 0x5f, 0x97,
	0xd4, 0x09, 0x00, 0x00,
}
