// Code generated by protoc-gen-go. DO NOT EDIT.
// source: store.proto

/*
Package server is a generated protocol buffer package.

It is generated from these files:
	server.proto

It has these top-level messages:
	Emtpy
	ACL
	Namespace
	NamespaceStat
	Reservation
	Object
	ListNamespaceRequest
	CreateNamespaceRequest
	CreateNamespaceReply
	GetNamespaceRequest
	GetNamespaceReply
	DeleteNamespaceRequest
	DeleteNamespaceReply
	GetNamespaceStatRequest
	GetNamespaceStatReply
	AuthorizeUserRequest
	AuthorizeUserReply
	CreateReservationRequest
	CreateReservationReply
	ListReservationRequest
	ListReservationReply
	GetReservationRequest
	GetReservationReply
	RenewReservationRequest
	RenewReservationReply
	ListObjectsRequest
	CreateObjectRequest
	CreateObjectReply
	ExistsObjectRequest
	ExistsObjectReply
	GetObjectRequest
	GetObjectReply
	DeleteObjectRequest
	DeleteObjectReply
*/
package store

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Types
type Emtpy struct {
}

func (m *Emtpy) Reset()                    { *m = Emtpy{} }
func (m *Emtpy) String() string            { return proto.CompactTextString(m) }
func (*Emtpy) ProtoMessage()               {}
func (*Emtpy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ACL struct {
	Read   bool `protobuf:"varint,1,opt,name=read" json:"read,omitempty"`
	Write  bool `protobuf:"varint,2,opt,name=write" json:"write,omitempty"`
	Delete bool `protobuf:"varint,3,opt,name=delete" json:"delete,omitempty"`
	Admin  bool `protobuf:"varint,4,opt,name=admin" json:"admin,omitempty"`
}

func (m *ACL) Reset()                    { *m = ACL{} }
func (m *ACL) String() string            { return proto.CompactTextString(m) }
func (*ACL) ProtoMessage()               {}
func (*ACL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ACL) GetRead() bool {
	if m != nil {
		return m.Read
	}
	return false
}

func (m *ACL) GetWrite() bool {
	if m != nil {
		return m.Write
	}
	return false
}

func (m *ACL) GetDelete() bool {
	if m != nil {
		return m.Delete
	}
	return false
}

func (m *ACL) GetAdmin() bool {
	if m != nil {
		return m.Admin
	}
	return false
}

type Namespace struct {
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	Acl   []*ACL `protobuf:"bytes,2,rep,name=acl" json:"acl,omitempty"`
}

func (m *Namespace) Reset()                    { *m = Namespace{} }
func (m *Namespace) String() string            { return proto.CompactTextString(m) }
func (*Namespace) ProtoMessage()               {}
func (*Namespace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Namespace) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Namespace) GetAcl() []*ACL {
	if m != nil {
		return m.Acl
	}
	return nil
}

type NamespaceStat struct {
	RequestPerHour int64 `protobuf:"varint,1,opt,name=requestPerHour" json:"requestPerHour,omitempty"`
	NrObjects      int64 `protobuf:"varint,2,opt,name=nrObjects" json:"nrObjects,omitempty"`
}

func (m *NamespaceStat) Reset()                    { *m = NamespaceStat{} }
func (m *NamespaceStat) String() string            { return proto.CompactTextString(m) }
func (*NamespaceStat) ProtoMessage()               {}
func (*NamespaceStat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NamespaceStat) GetRequestPerHour() int64 {
	if m != nil {
		return m.RequestPerHour
	}
	return 0
}

func (m *NamespaceStat) GetNrObjects() int64 {
	if m != nil {
		return m.NrObjects
	}
	return 0
}

type Reservation struct {
	Id           string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	AdminID      string `protobuf:"bytes,2,opt,name=adminID" json:"adminID,omitempty"`
	Created      int64  `protobuf:"varint,3,opt,name=created" json:"created,omitempty"`
	Updated      int64  `protobuf:"varint,4,opt,name=updated" json:"updated,omitempty"`
	SizeReserved int64  `protobuf:"varint,5,opt,name=sizeReserved" json:"sizeReserved,omitempty"`
	SizeUsed     int64  `protobuf:"varint,6,opt,name=sizeUsed" json:"sizeUsed,omitempty"`
	ExpireAt     int64  `protobuf:"varint,7,opt,name=expireAt" json:"expireAt,omitempty"`
}

func (m *Reservation) Reset()                    { *m = Reservation{} }
func (m *Reservation) String() string            { return proto.CompactTextString(m) }
func (*Reservation) ProtoMessage()               {}
func (*Reservation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Reservation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Reservation) GetAdminID() string {
	if m != nil {
		return m.AdminID
	}
	return ""
}

func (m *Reservation) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Reservation) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *Reservation) GetSizeReserved() int64 {
	if m != nil {
		return m.SizeReserved
	}
	return 0
}

func (m *Reservation) GetSizeUsed() int64 {
	if m != nil {
		return m.SizeUsed
	}
	return 0
}

func (m *Reservation) GetExpireAt() int64 {
	if m != nil {
		return m.ExpireAt
	}
	return 0
}

type Object struct {
	Key   string            `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value []byte            `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Tags  map[string]string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Object) Reset()                    { *m = Object{} }
func (m *Object) String() string            { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()               {}
func (*Object) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Object) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Object) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Object) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// Namespace management
type ListNamespaceRequest struct {
}

func (m *ListNamespaceRequest) Reset()                    { *m = ListNamespaceRequest{} }
func (m *ListNamespaceRequest) String() string            { return proto.CompactTextString(m) }
func (*ListNamespaceRequest) ProtoMessage()               {}
func (*ListNamespaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type CreateNamespaceRequest struct {
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
}

func (m *CreateNamespaceRequest) Reset()                    { *m = CreateNamespaceRequest{} }
func (m *CreateNamespaceRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateNamespaceRequest) ProtoMessage()               {}
func (*CreateNamespaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CreateNamespaceRequest) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type CreateNamespaceReply struct {
}

func (m *CreateNamespaceReply) Reset()                    { *m = CreateNamespaceReply{} }
func (m *CreateNamespaceReply) String() string            { return proto.CompactTextString(m) }
func (*CreateNamespaceReply) ProtoMessage()               {}
func (*CreateNamespaceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type GetNamespaceRequest struct {
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
}

func (m *GetNamespaceRequest) Reset()                    { *m = GetNamespaceRequest{} }
func (m *GetNamespaceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNamespaceRequest) ProtoMessage()               {}
func (*GetNamespaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetNamespaceRequest) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type GetNamespaceReply struct {
	Namespace *Namespace `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *GetNamespaceReply) Reset()                    { *m = GetNamespaceReply{} }
func (m *GetNamespaceReply) String() string            { return proto.CompactTextString(m) }
func (*GetNamespaceReply) ProtoMessage()               {}
func (*GetNamespaceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetNamespaceReply) GetNamespace() *Namespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

type DeleteNamespaceRequest struct {
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
}

func (m *DeleteNamespaceRequest) Reset()                    { *m = DeleteNamespaceRequest{} }
func (m *DeleteNamespaceRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteNamespaceRequest) ProtoMessage()               {}
func (*DeleteNamespaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DeleteNamespaceRequest) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type DeleteNamespaceReply struct {
}

func (m *DeleteNamespaceReply) Reset()                    { *m = DeleteNamespaceReply{} }
func (m *DeleteNamespaceReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteNamespaceReply) ProtoMessage()               {}
func (*DeleteNamespaceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type GetNamespaceStatRequest struct {
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
}

func (m *GetNamespaceStatRequest) Reset()                    { *m = GetNamespaceStatRequest{} }
func (m *GetNamespaceStatRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNamespaceStatRequest) ProtoMessage()               {}
func (*GetNamespaceStatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetNamespaceStatRequest) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type GetNamespaceStatReply struct {
	Stat *NamespaceStat `protobuf:"bytes,1,opt,name=stat" json:"stat,omitempty"`
}

func (m *GetNamespaceStatReply) Reset()                    { *m = GetNamespaceStatReply{} }
func (m *GetNamespaceStatReply) String() string            { return proto.CompactTextString(m) }
func (*GetNamespaceStatReply) ProtoMessage()               {}
func (*GetNamespaceStatReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetNamespaceStatReply) GetStat() *NamespaceStat {
	if m != nil {
		return m.Stat
	}
	return nil
}

type AuthorizeUserRequest struct {
	Id  string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Acl *ACL   `protobuf:"bytes,2,opt,name=acl" json:"acl,omitempty"`
}

func (m *AuthorizeUserRequest) Reset()                    { *m = AuthorizeUserRequest{} }
func (m *AuthorizeUserRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthorizeUserRequest) ProtoMessage()               {}
func (*AuthorizeUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *AuthorizeUserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AuthorizeUserRequest) GetAcl() *ACL {
	if m != nil {
		return m.Acl
	}
	return nil
}

type AuthorizeUserReply struct {
}

func (m *AuthorizeUserReply) Reset()                    { *m = AuthorizeUserReply{} }
func (m *AuthorizeUserReply) String() string            { return proto.CompactTextString(m) }
func (*AuthorizeUserReply) ProtoMessage()               {}
func (*AuthorizeUserReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

// Reservation management
type CreateReservationRequest struct {
	Label  string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	Size   int64  `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Period int64  `protobuf:"varint,3,opt,name=period" json:"period,omitempty"`
}

func (m *CreateReservationRequest) Reset()                    { *m = CreateReservationRequest{} }
func (m *CreateReservationRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateReservationRequest) ProtoMessage()               {}
func (*CreateReservationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CreateReservationRequest) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *CreateReservationRequest) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *CreateReservationRequest) GetPeriod() int64 {
	if m != nil {
		return m.Period
	}
	return 0
}

type CreateReservationReply struct {
	Reservation *Reservation `protobuf:"bytes,1,opt,name=reservation" json:"reservation,omitempty"`
}

func (m *CreateReservationReply) Reset()                    { *m = CreateReservationReply{} }
func (m *CreateReservationReply) String() string            { return proto.CompactTextString(m) }
func (*CreateReservationReply) ProtoMessage()               {}
func (*CreateReservationReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CreateReservationReply) GetReservation() *Reservation {
	if m != nil {
		return m.Reservation
	}
	return nil
}

type ListReservationRequest struct {
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
}

func (m *ListReservationRequest) Reset()                    { *m = ListReservationRequest{} }
func (m *ListReservationRequest) String() string            { return proto.CompactTextString(m) }
func (*ListReservationRequest) ProtoMessage()               {}
func (*ListReservationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ListReservationRequest) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type ListReservationReply struct {
	Reservations []*Reservation `protobuf:"bytes,1,rep,name=reservations" json:"reservations,omitempty"`
}

func (m *ListReservationReply) Reset()                    { *m = ListReservationReply{} }
func (m *ListReservationReply) String() string            { return proto.CompactTextString(m) }
func (*ListReservationReply) ProtoMessage()               {}
func (*ListReservationReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ListReservationReply) GetReservations() []*Reservation {
	if m != nil {
		return m.Reservations
	}
	return nil
}

type GetReservationRequest struct {
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *GetReservationRequest) Reset()                    { *m = GetReservationRequest{} }
func (m *GetReservationRequest) String() string            { return proto.CompactTextString(m) }
func (*GetReservationRequest) ProtoMessage()               {}
func (*GetReservationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GetReservationRequest) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *GetReservationRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetReservationReply struct {
	Reservation *Reservation `protobuf:"bytes,1,opt,name=reservation" json:"reservation,omitempty"`
}

func (m *GetReservationReply) Reset()                    { *m = GetReservationReply{} }
func (m *GetReservationReply) String() string            { return proto.CompactTextString(m) }
func (*GetReservationReply) ProtoMessage()               {}
func (*GetReservationReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *GetReservationReply) GetReservation() *Reservation {
	if m != nil {
		return m.Reservation
	}
	return nil
}

type RenewReservationRequest struct {
	Label  string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	Id     string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Size   int64  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Period int64  `protobuf:"varint,4,opt,name=period" json:"period,omitempty"`
}

func (m *RenewReservationRequest) Reset()                    { *m = RenewReservationRequest{} }
func (m *RenewReservationRequest) String() string            { return proto.CompactTextString(m) }
func (*RenewReservationRequest) ProtoMessage()               {}
func (*RenewReservationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *RenewReservationRequest) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *RenewReservationRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RenewReservationRequest) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *RenewReservationRequest) GetPeriod() int64 {
	if m != nil {
		return m.Period
	}
	return 0
}

type RenewReservationReply struct {
	Reservation *Reservation `protobuf:"bytes,1,opt,name=reservation" json:"reservation,omitempty"`
}

func (m *RenewReservationReply) Reset()                    { *m = RenewReservationReply{} }
func (m *RenewReservationReply) String() string            { return proto.CompactTextString(m) }
func (*RenewReservationReply) ProtoMessage()               {}
func (*RenewReservationReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *RenewReservationReply) GetReservation() *Reservation {
	if m != nil {
		return m.Reservation
	}
	return nil
}

// Object management
type ListObjectsRequest struct {
}

func (m *ListObjectsRequest) Reset()                    { *m = ListObjectsRequest{} }
func (m *ListObjectsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListObjectsRequest) ProtoMessage()               {}
func (*ListObjectsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

type CreateObjectRequest struct {
	Object *Object `protobuf:"bytes,1,opt,name=object" json:"object,omitempty"`
}

func (m *CreateObjectRequest) Reset()                    { *m = CreateObjectRequest{} }
func (m *CreateObjectRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateObjectRequest) ProtoMessage()               {}
func (*CreateObjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *CreateObjectRequest) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

type CreateObjectReply struct {
}

func (m *CreateObjectReply) Reset()                    { *m = CreateObjectReply{} }
func (m *CreateObjectReply) String() string            { return proto.CompactTextString(m) }
func (*CreateObjectReply) ProtoMessage()               {}
func (*CreateObjectReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

type ExistsObjectRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *ExistsObjectRequest) Reset()                    { *m = ExistsObjectRequest{} }
func (m *ExistsObjectRequest) String() string            { return proto.CompactTextString(m) }
func (*ExistsObjectRequest) ProtoMessage()               {}
func (*ExistsObjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ExistsObjectRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type ExistsObjectReply struct {
	Exists bool `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
}

func (m *ExistsObjectReply) Reset()                    { *m = ExistsObjectReply{} }
func (m *ExistsObjectReply) String() string            { return proto.CompactTextString(m) }
func (*ExistsObjectReply) ProtoMessage()               {}
func (*ExistsObjectReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ExistsObjectReply) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

type GetObjectRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *GetObjectRequest) Reset()                    { *m = GetObjectRequest{} }
func (m *GetObjectRequest) String() string            { return proto.CompactTextString(m) }
func (*GetObjectRequest) ProtoMessage()               {}
func (*GetObjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *GetObjectRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetObjectReply struct {
	Object *Object `protobuf:"bytes,2,opt,name=object" json:"object,omitempty"`
}

func (m *GetObjectReply) Reset()                    { *m = GetObjectReply{} }
func (m *GetObjectReply) String() string            { return proto.CompactTextString(m) }
func (*GetObjectReply) ProtoMessage()               {}
func (*GetObjectReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *GetObjectReply) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

type DeleteObjectRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *DeleteObjectRequest) Reset()                    { *m = DeleteObjectRequest{} }
func (m *DeleteObjectRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteObjectRequest) ProtoMessage()               {}
func (*DeleteObjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *DeleteObjectRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type DeleteObjectReply struct {
}

func (m *DeleteObjectReply) Reset()                    { *m = DeleteObjectReply{} }
func (m *DeleteObjectReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteObjectReply) ProtoMessage()               {}
func (*DeleteObjectReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func init() {
	proto.RegisterType((*Emtpy)(nil), "Emtpy")
	proto.RegisterType((*ACL)(nil), "ACL")
	proto.RegisterType((*Namespace)(nil), "Namespace")
	proto.RegisterType((*NamespaceStat)(nil), "NamespaceStat")
	proto.RegisterType((*Reservation)(nil), "Reservation")
	proto.RegisterType((*Object)(nil), "Object")
	proto.RegisterType((*ListNamespaceRequest)(nil), "ListNamespaceRequest")
	proto.RegisterType((*CreateNamespaceRequest)(nil), "CreateNamespaceRequest")
	proto.RegisterType((*CreateNamespaceReply)(nil), "CreateNamespaceReply")
	proto.RegisterType((*GetNamespaceRequest)(nil), "GetNamespaceRequest")
	proto.RegisterType((*GetNamespaceReply)(nil), "GetNamespaceReply")
	proto.RegisterType((*DeleteNamespaceRequest)(nil), "DeleteNamespaceRequest")
	proto.RegisterType((*DeleteNamespaceReply)(nil), "DeleteNamespaceReply")
	proto.RegisterType((*GetNamespaceStatRequest)(nil), "GetNamespaceStatRequest")
	proto.RegisterType((*GetNamespaceStatReply)(nil), "GetNamespaceStatReply")
	proto.RegisterType((*AuthorizeUserRequest)(nil), "AuthorizeUserRequest")
	proto.RegisterType((*AuthorizeUserReply)(nil), "AuthorizeUserReply")
	proto.RegisterType((*CreateReservationRequest)(nil), "CreateReservationRequest")
	proto.RegisterType((*CreateReservationReply)(nil), "CreateReservationReply")
	proto.RegisterType((*ListReservationRequest)(nil), "ListReservationRequest")
	proto.RegisterType((*ListReservationReply)(nil), "ListReservationReply")
	proto.RegisterType((*GetReservationRequest)(nil), "GetReservationRequest")
	proto.RegisterType((*GetReservationReply)(nil), "GetReservationReply")
	proto.RegisterType((*RenewReservationRequest)(nil), "RenewReservationRequest")
	proto.RegisterType((*RenewReservationReply)(nil), "RenewReservationReply")
	proto.RegisterType((*ListObjectsRequest)(nil), "ListObjectsRequest")
	proto.RegisterType((*CreateObjectRequest)(nil), "CreateObjectRequest")
	proto.RegisterType((*CreateObjectReply)(nil), "CreateObjectReply")
	proto.RegisterType((*ExistsObjectRequest)(nil), "ExistsObjectRequest")
	proto.RegisterType((*ExistsObjectReply)(nil), "ExistsObjectReply")
	proto.RegisterType((*GetObjectRequest)(nil), "GetObjectRequest")
	proto.RegisterType((*GetObjectReply)(nil), "GetObjectReply")
	proto.RegisterType((*DeleteObjectRequest)(nil), "DeleteObjectRequest")
	proto.RegisterType((*DeleteObjectReply)(nil), "DeleteObjectReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NamespaceManager service

type NamespaceManagerClient interface {
	List(ctx context.Context, in *ListReservationRequest, opts ...grpc.CallOption) (NamespaceManager_ListClient, error)
	Create(ctx context.Context, in *CreateReservationRequest, opts ...grpc.CallOption) (*CreateNamespaceReply, error)
	Get(ctx context.Context, in *GetNamespaceStatRequest, opts ...grpc.CallOption) (*GetNamespaceReply, error)
	Delete(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceReply, error)
	Stat(ctx context.Context, in *GetNamespaceStatRequest, opts ...grpc.CallOption) (*GetNamespaceStatReply, error)
}

type namespaceManagerClient struct {
	cc *grpc.ClientConn
}

func NewNamespaceManagerClient(cc *grpc.ClientConn) NamespaceManagerClient {
	return &namespaceManagerClient{cc}
}

func (c *namespaceManagerClient) List(ctx context.Context, in *ListReservationRequest, opts ...grpc.CallOption) (NamespaceManager_ListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NamespaceManager_serviceDesc.Streams[0], c.cc, "/NamespaceManager/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &namespaceManagerListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NamespaceManager_ListClient interface {
	Recv() (*Namespace, error)
	grpc.ClientStream
}

type namespaceManagerListClient struct {
	grpc.ClientStream
}

func (x *namespaceManagerListClient) Recv() (*Namespace, error) {
	m := new(Namespace)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *namespaceManagerClient) Create(ctx context.Context, in *CreateReservationRequest, opts ...grpc.CallOption) (*CreateNamespaceReply, error) {
	out := new(CreateNamespaceReply)
	err := grpc.Invoke(ctx, "/NamespaceManager/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceManagerClient) Get(ctx context.Context, in *GetNamespaceStatRequest, opts ...grpc.CallOption) (*GetNamespaceReply, error) {
	out := new(GetNamespaceReply)
	err := grpc.Invoke(ctx, "/NamespaceManager/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceManagerClient) Delete(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceReply, error) {
	out := new(DeleteNamespaceReply)
	err := grpc.Invoke(ctx, "/NamespaceManager/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceManagerClient) Stat(ctx context.Context, in *GetNamespaceStatRequest, opts ...grpc.CallOption) (*GetNamespaceStatReply, error) {
	out := new(GetNamespaceStatReply)
	err := grpc.Invoke(ctx, "/NamespaceManager/Stat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NamespaceManager service

type NamespaceManagerServer interface {
	List(*ListReservationRequest, NamespaceManager_ListServer) error
	Create(context.Context, *CreateReservationRequest) (*CreateNamespaceReply, error)
	Get(context.Context, *GetNamespaceStatRequest) (*GetNamespaceReply, error)
	Delete(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceReply, error)
	Stat(context.Context, *GetNamespaceStatRequest) (*GetNamespaceStatReply, error)
}

func RegisterNamespaceManagerServer(s *grpc.Server, srv NamespaceManagerServer) {
	s.RegisterService(&_NamespaceManager_serviceDesc, srv)
}

func _NamespaceManager_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListReservationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NamespaceManagerServer).List(m, &namespaceManagerListServer{stream})
}

type NamespaceManager_ListServer interface {
	Send(*Namespace) error
	grpc.ServerStream
}

type namespaceManagerListServer struct {
	grpc.ServerStream
}

func (x *namespaceManagerListServer) Send(m *Namespace) error {
	return x.ServerStream.SendMsg(m)
}

func _NamespaceManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NamespaceManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceManagerServer).Create(ctx, req.(*CreateReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NamespaceManager/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceManagerServer).Get(ctx, req.(*GetNamespaceStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NamespaceManager/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceManagerServer).Delete(ctx, req.(*DeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceManager_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceManagerServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NamespaceManager/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceManagerServer).Stat(ctx, req.(*GetNamespaceStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NamespaceManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NamespaceManager",
	HandlerType: (*NamespaceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _NamespaceManager_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _NamespaceManager_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NamespaceManager_Delete_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _NamespaceManager_Stat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _NamespaceManager_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "store.proto",
}

// Client API for ReservationManager service

type ReservationManagerClient interface {
	Create(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*CreateReservationReply, error)
	List(ctx context.Context, in *ListReservationRequest, opts ...grpc.CallOption) (ReservationManager_ListClient, error)
	Get(ctx context.Context, in *GetReservationRequest, opts ...grpc.CallOption) (*GetReservationReply, error)
	Renew(ctx context.Context, in *RenewReservationRequest, opts ...grpc.CallOption) (*RenewReservationReply, error)
}

type reservationManagerClient struct {
	cc *grpc.ClientConn
}

func NewReservationManagerClient(cc *grpc.ClientConn) ReservationManagerClient {
	return &reservationManagerClient{cc}
}

func (c *reservationManagerClient) Create(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*CreateReservationReply, error) {
	out := new(CreateReservationReply)
	err := grpc.Invoke(ctx, "/ReservationManager/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationManagerClient) List(ctx context.Context, in *ListReservationRequest, opts ...grpc.CallOption) (ReservationManager_ListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ReservationManager_serviceDesc.Streams[0], c.cc, "/ReservationManager/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &reservationManagerListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReservationManager_ListClient interface {
	Recv() (*Reservation, error)
	grpc.ClientStream
}

type reservationManagerListClient struct {
	grpc.ClientStream
}

func (x *reservationManagerListClient) Recv() (*Reservation, error) {
	m := new(Reservation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reservationManagerClient) Get(ctx context.Context, in *GetReservationRequest, opts ...grpc.CallOption) (*GetReservationReply, error) {
	out := new(GetReservationReply)
	err := grpc.Invoke(ctx, "/ReservationManager/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationManagerClient) Renew(ctx context.Context, in *RenewReservationRequest, opts ...grpc.CallOption) (*RenewReservationReply, error) {
	out := new(RenewReservationReply)
	err := grpc.Invoke(ctx, "/ReservationManager/Renew", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ReservationManager service

type ReservationManagerServer interface {
	Create(context.Context, *CreateObjectRequest) (*CreateReservationReply, error)
	List(*ListReservationRequest, ReservationManager_ListServer) error
	Get(context.Context, *GetReservationRequest) (*GetReservationReply, error)
	Renew(context.Context, *RenewReservationRequest) (*RenewReservationReply, error)
}

func RegisterReservationManagerServer(s *grpc.Server, srv ReservationManagerServer) {
	s.RegisterService(&_ReservationManager_serviceDesc, srv)
}

func _ReservationManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReservationManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationManagerServer).Create(ctx, req.(*CreateObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationManager_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListReservationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReservationManagerServer).List(m, &reservationManagerListServer{stream})
}

type ReservationManager_ListServer interface {
	Send(*Reservation) error
	grpc.ServerStream
}

type reservationManagerListServer struct {
	grpc.ServerStream
}

func (x *reservationManagerListServer) Send(m *Reservation) error {
	return x.ServerStream.SendMsg(m)
}

func _ReservationManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReservationManager/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationManagerServer).Get(ctx, req.(*GetReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationManager_Renew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationManagerServer).Renew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReservationManager/Renew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationManagerServer).Renew(ctx, req.(*RenewReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReservationManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ReservationManager",
	HandlerType: (*ReservationManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ReservationManager_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ReservationManager_Get_Handler,
		},
		{
			MethodName: "Renew",
			Handler:    _ReservationManager_Renew_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _ReservationManager_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "store.proto",
}

// Client API for ObjectManager service

type ObjectManagerClient interface {
	Create(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*CreateObjectReply, error)
	List(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (ObjectManager_ListClient, error)
	Get(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectReply, error)
	Exists(ctx context.Context, in *ExistsObjectRequest, opts ...grpc.CallOption) (*ExistsObjectReply, error)
	Delete(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectReply, error)
}

type objectManagerClient struct {
	cc *grpc.ClientConn
}

func NewObjectManagerClient(cc *grpc.ClientConn) ObjectManagerClient {
	return &objectManagerClient{cc}
}

func (c *objectManagerClient) Create(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*CreateObjectReply, error) {
	out := new(CreateObjectReply)
	err := grpc.Invoke(ctx, "/ObjectManager/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectManagerClient) List(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (ObjectManager_ListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ObjectManager_serviceDesc.Streams[0], c.cc, "/ObjectManager/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectManagerListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectManager_ListClient interface {
	Recv() (*Object, error)
	grpc.ClientStream
}

type objectManagerListClient struct {
	grpc.ClientStream
}

func (x *objectManagerListClient) Recv() (*Object, error) {
	m := new(Object)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectManagerClient) Get(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectReply, error) {
	out := new(GetObjectReply)
	err := grpc.Invoke(ctx, "/ObjectManager/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectManagerClient) Exists(ctx context.Context, in *ExistsObjectRequest, opts ...grpc.CallOption) (*ExistsObjectReply, error) {
	out := new(ExistsObjectReply)
	err := grpc.Invoke(ctx, "/ObjectManager/Exists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectManagerClient) Delete(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectReply, error) {
	out := new(DeleteObjectReply)
	err := grpc.Invoke(ctx, "/ObjectManager/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ObjectManager service

type ObjectManagerServer interface {
	Create(context.Context, *CreateObjectRequest) (*CreateObjectReply, error)
	List(*ListObjectsRequest, ObjectManager_ListServer) error
	Get(context.Context, *GetObjectRequest) (*GetObjectReply, error)
	Exists(context.Context, *ExistsObjectRequest) (*ExistsObjectReply, error)
	Delete(context.Context, *DeleteObjectRequest) (*DeleteObjectReply, error)
}

func RegisterObjectManagerServer(s *grpc.Server, srv ObjectManagerServer) {
	s.RegisterService(&_ObjectManager_serviceDesc, srv)
}

func _ObjectManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectManagerServer).Create(ctx, req.(*CreateObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectManager_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListObjectsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectManagerServer).List(m, &objectManagerListServer{stream})
}

type ObjectManager_ListServer interface {
	Send(*Object) error
	grpc.ServerStream
}

type objectManagerListServer struct {
	grpc.ServerStream
}

func (x *objectManagerListServer) Send(m *Object) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjectManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectManager/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectManagerServer).Get(ctx, req.(*GetObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectManager_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectManagerServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectManager/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectManagerServer).Exists(ctx, req.(*ExistsObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectManager/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectManagerServer).Delete(ctx, req.(*DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ObjectManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ObjectManager",
	HandlerType: (*ObjectManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ObjectManager_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ObjectManager_Get_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _ObjectManager_Exists_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ObjectManager_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _ObjectManager_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "store.proto",
}

func init() { proto.RegisterFile("store.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 949 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdb, 0x6e, 0xdb, 0x46,
	0x10, 0xe5, 0xcd, 0x72, 0x34, 0x72, 0x5c, 0x6b, 0x44, 0x4b, 0x2c, 0x51, 0xa0, 0xc1, 0xa2, 0x6d,
	0x0c, 0x18, 0xd8, 0x24, 0xea, 0x35, 0x49, 0x53, 0xc0, 0x70, 0x0c, 0xbb, 0x80, 0x7b, 0x01, 0xdb,
	0xbc, 0xb5, 0x0f, 0xb4, 0xb9, 0x70, 0xd9, 0xc8, 0x12, 0xbb, 0x5c, 0x25, 0x51, 0xbf, 0xa0, 0x8f,
	0xfd, 0x94, 0xfe, 0x45, 0xff, 0xa8, 0xcf, 0xc5, 0x5e, 0x48, 0x91, 0x22, 0x1d, 0x09, 0xce, 0x1b,
	0xe7, 0xba, 0x73, 0x66, 0xe6, 0x8c, 0x04, 0xbd, 0x5c, 0xcc, 0x38, 0xa3, 0x19, 0x9f, 0x89, 0x19,
	0xd9, 0x86, 0xad, 0x93, 0x6b, 0x91, 0x2d, 0xc8, 0xaf, 0xe0, 0x1e, 0x1d, 0x9f, 0x23, 0x82, 0xc7,
	0x59, 0x9c, 0x04, 0xf6, 0x3d, 0xfb, 0xe0, 0x4e, 0xa4, 0xbe, 0xd1, 0x87, 0xad, 0xd7, 0x3c, 0x15,
	0x2c, 0x70, 0x94, 0x52, 0x0b, 0x38, 0x84, 0x4e, 0xc2, 0x26, 0x4c, 0xb0, 0xc0, 0x55, 0x6a, 0x23,
	0x49, 0xef, 0x38, 0xb9, 0x4e, 0xa7, 0x81, 0xa7, 0xbd, 0x95, 0x40, 0x1e, 0x43, 0xf7, 0xfb, 0xf8,
	0x9a, 0xe5, 0x59, 0x7c, 0xa9, 0x5c, 0x26, 0xf1, 0x05, 0x9b, 0xa8, 0x57, 0xba, 0x91, 0x16, 0x70,
	0x08, 0x6e, 0x7c, 0x39, 0x09, 0x9c, 0x7b, 0xee, 0x41, 0x6f, 0xec, 0xd1, 0xa3, 0xe3, 0xf3, 0x48,
	0x2a, 0xc8, 0x0b, 0xb8, 0x5b, 0x86, 0xfe, 0x24, 0x62, 0x81, 0x9f, 0xc0, 0x2e, 0x67, 0x7f, 0xcc,
	0x59, 0x2e, 0x7e, 0x64, 0xfc, 0x6c, 0x36, 0xe7, 0x2a, 0x8f, 0x1b, 0xad, 0x68, 0xf1, 0x03, 0xe8,
	0x4e, 0xf9, 0x0f, 0x17, 0xbf, 0xb3, 0x4b, 0x91, 0xab, 0xda, 0xdd, 0x68, 0xa9, 0x20, 0xff, 0xda,
	0xd0, 0x8b, 0x58, 0xce, 0xf8, 0xab, 0x58, 0xa4, 0xb3, 0x29, 0xee, 0x82, 0x93, 0x26, 0xa6, 0x22,
	0x27, 0x4d, 0x30, 0x80, 0x6d, 0x55, 0xfa, 0xb7, 0xcf, 0x55, 0x6c, 0x37, 0x2a, 0x44, 0x69, 0xb9,
	0xe4, 0x2c, 0x16, 0x2c, 0x51, 0xd0, 0xdd, 0xa8, 0x10, 0xa5, 0x65, 0x9e, 0x25, 0xca, 0xe2, 0x69,
	0x8b, 0x11, 0x91, 0xc0, 0x4e, 0x9e, 0xfe, 0xc9, 0xf4, 0x83, 0x2c, 0x09, 0xb6, 0x94, 0xb9, 0xa6,
	0xc3, 0x10, 0xee, 0x48, 0xf9, 0x45, 0xce, 0x92, 0xa0, 0xa3, 0xec, 0xa5, 0x2c, 0x6d, 0xec, 0x4d,
	0x96, 0x72, 0x76, 0x24, 0x82, 0x6d, 0x6d, 0x2b, 0x64, 0xf2, 0xb7, 0x0d, 0x1d, 0x8d, 0x0a, 0xf7,
	0xc0, 0x7d, 0xc9, 0x16, 0x06, 0x85, 0xfc, 0x94, 0xbd, 0x7e, 0x15, 0x4f, 0xe6, 0x7a, 0x78, 0x3b,
	0x91, 0x16, 0xf0, 0x63, 0xf0, 0x44, 0x7c, 0x95, 0x07, 0xae, 0x6a, 0x76, 0x9f, 0xea, 0x70, 0xfa,
	0x73, 0x7c, 0x95, 0x9f, 0x4c, 0x05, 0x5f, 0x44, 0xca, 0x1c, 0x7e, 0x09, 0xdd, 0x52, 0xb5, 0x2e,
	0x77, 0xd7, 0xe4, 0x7e, 0xe2, 0x7c, 0x65, 0x93, 0x21, 0xf8, 0xe7, 0x69, 0x2e, 0xca, 0xb9, 0x45,
	0x7a, 0x32, 0x84, 0xc2, 0xf0, 0x58, 0xf5, 0x6a, 0xd5, 0xd2, 0xbe, 0x13, 0x32, 0x4f, 0xc3, 0x3f,
	0x9b, 0x2c, 0xc8, 0x21, 0x0c, 0x4e, 0x99, 0xd8, 0x30, 0xc9, 0x33, 0xe8, 0xd7, 0x9d, 0xb3, 0xc9,
	0x02, 0x0f, 0xa0, 0x3b, 0x2d, 0x34, 0xca, 0xbd, 0x37, 0x06, 0xba, 0xf4, 0x59, 0x1a, 0x65, 0xcd,
	0xcf, 0xd5, 0x6a, 0x6f, 0x5e, 0x73, 0xc3, 0x5f, 0xd6, 0xfc, 0x00, 0x46, 0xd5, 0x32, 0xe4, 0x2a,
	0xbf, 0x3d, 0xd1, 0x53, 0xd8, 0x6f, 0x06, 0xc8, 0xda, 0x09, 0x78, 0xb9, 0x88, 0x85, 0x29, 0x7b,
	0x97, 0xd6, 0x5d, 0x94, 0x8d, 0x7c, 0x03, 0xfe, 0xd1, 0x5c, 0xfc, 0x36, 0xe3, 0x7a, 0x83, 0x78,
	0xf1, 0xd4, 0xea, 0x9a, 0x97, 0xac, 0xb3, 0xeb, 0xac, 0xf3, 0x01, 0x57, 0xe2, 0x25, 0x86, 0x5f,
	0x20, 0xd0, 0xf3, 0xa8, 0x30, 0xe7, 0xad, 0x20, 0xe4, 0x41, 0x91, 0x4b, 0x6c, 0xf8, 0xa7, 0xbe,
	0xe5, 0xe9, 0xc8, 0x18, 0x4f, 0x67, 0x05, 0x7f, 0x8c, 0x44, 0xce, 0x8a, 0xed, 0xa8, 0x65, 0x97,
	0x88, 0x29, 0xf4, 0xf8, 0x52, 0x67, 0x80, 0xef, 0xd0, 0xaa, 0x5f, 0xd5, 0x41, 0xce, 0x4c, 0xee,
	0xdf, 0xa6, 0x55, 0x92, 0x33, 0xbd, 0xaf, 0x8d, 0x77, 0x1f, 0xc2, 0x4e, 0x25, 0x6d, 0x1e, 0xd8,
	0x8a, 0x2f, 0xf5, 0x87, 0x6b, 0x1e, 0xe4, 0x99, 0x1a, 0xda, 0xc6, 0xed, 0xd1, 0xe3, 0x70, 0x8a,
	0x71, 0x90, 0x13, 0xb5, 0xd8, 0xef, 0x8c, 0xff, 0x25, 0x8c, 0x22, 0x36, 0x65, 0xaf, 0x6f, 0x5b,
	0x47, 0x39, 0x36, 0xb7, 0x75, 0x6c, 0x5e, 0x6d, 0x6c, 0xa7, 0xb0, 0xdf, 0x7c, 0xec, 0x36, 0x55,
	0xfb, 0x80, 0x72, 0x0a, 0xe6, 0x42, 0x17, 0x37, 0xe3, 0x0b, 0x18, 0xe8, 0xad, 0xd0, 0xfa, 0x02,
	0xc7, 0x87, 0xd0, 0x99, 0x29, 0x85, 0xc9, 0xbb, 0x6d, 0x8e, 0x58, 0x64, 0xd4, 0x64, 0x00, 0xfd,
	0x7a, 0x9c, 0x5c, 0xe0, 0xfb, 0x30, 0x38, 0x79, 0x93, 0xe6, 0x22, 0xaf, 0x27, 0x6b, 0xdc, 0x36,
	0x72, 0x08, 0xfd, 0xba, 0xa3, 0x04, 0x34, 0x84, 0x0e, 0x53, 0x4a, 0xf3, 0xfb, 0x68, 0x24, 0xf2,
	0x11, 0xec, 0x9d, 0x32, 0xb1, 0x2e, 0xe5, 0x23, 0xd8, 0xad, 0x78, 0xc9, 0x7c, 0x4b, 0x0c, 0x4e,
	0x3b, 0x86, 0xfb, 0x30, 0xd0, 0xb7, 0x64, 0x5d, 0xee, 0x01, 0xf4, 0xeb, 0x8e, 0xd9, 0x64, 0x31,
	0xfe, 0xc7, 0x81, 0xbd, 0xf2, 0x36, 0x7c, 0x17, 0x4f, 0xe3, 0x2b, 0xc6, 0xf1, 0x01, 0x78, 0xb2,
	0xc9, 0x38, 0xa2, 0xed, 0x0c, 0x09, 0x2b, 0x67, 0x90, 0x58, 0x0f, 0x6d, 0xfc, 0x1a, 0x3a, 0xba,
	0x8f, 0xf8, 0x3e, 0xbd, 0x89, 0xfc, 0xe1, 0x3e, 0x6d, 0xbd, 0xd3, 0x16, 0x7e, 0x0e, 0xee, 0x29,
	0x13, 0x18, 0xd0, 0x1b, 0x6e, 0x5f, 0x88, 0xb4, 0x71, 0x9c, 0x89, 0x85, 0x4f, 0xa0, 0xa3, 0xf1,
	0xe0, 0x88, 0xb6, 0x5f, 0xdf, 0x70, 0x9f, 0xb6, 0x9e, 0x59, 0x19, 0xeb, 0xa9, 0xff, 0x09, 0x37,
	0xbf, 0x39, 0xa4, 0xad, 0x87, 0x95, 0x58, 0xe3, 0xff, 0x6c, 0xc0, 0x0a, 0xbc, 0xa2, 0x69, 0x8f,
	0xcb, 0x1e, 0xf8, 0xb4, 0x65, 0x19, 0xc3, 0x11, 0x6d, 0x3f, 0x5c, 0xc4, 0xc2, 0x47, 0xeb, 0xfa,
	0x5d, 0x23, 0x84, 0xea, 0xb8, 0xe9, 0x99, 0xaa, 0xb2, 0x25, 0xc0, 0xa7, 0x2d, 0x27, 0x82, 0x58,
	0xf8, 0x14, 0xb6, 0x14, 0x0f, 0x31, 0xa0, 0x37, 0x90, 0x3f, 0x1c, 0xd2, 0x56, 0xa6, 0x12, 0x6b,
	0xfc, 0x97, 0x03, 0x77, 0x35, 0xa6, 0x02, 0xf3, 0x67, 0x6b, 0x30, 0x23, 0x6d, 0xd2, 0xcb, 0xc2,
	0x03, 0x03, 0x77, 0x40, 0x9b, 0x54, 0x0e, 0x8b, 0xfd, 0x56, 0x28, 0x0f, 0x35, 0xca, 0x3e, 0x5d,
	0xa5, 0x4e, 0xf8, 0x1e, 0xad, 0xf3, 0x84, 0x58, 0xb2, 0x18, 0x4d, 0x47, 0xf4, 0x69, 0x0b, 0x81,
	0x43, 0xa4, 0x0d, 0xb6, 0xea, 0x28, 0xb3, 0x45, 0x3e, 0x6d, 0xe1, 0x51, 0x88, 0xb4, 0x41, 0x1a,
	0x62, 0x5d, 0x74, 0xd4, 0x5f, 0xe3, 0x4f, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xe4, 0x2a,
	0x6b, 0x29, 0x0b, 0x00, 0x00,
}
