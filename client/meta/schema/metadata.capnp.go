// Code generated by capnpc-go. DO NOT EDIT.

package schema

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Metadata struct{ capnp.Struct }

// Metadata_TypeID is the unique identifier for the type Metadata.
const Metadata_TypeID = 0x84eb980ee3c7d21d

func NewMetadata(s *capnp.Segment) (Metadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 6})
	return Metadata{st}, err
}

func NewRootMetadata(s *capnp.Segment) (Metadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 6})
	return Metadata{st}, err
}

func ReadRootMetadata(msg *capnp.Message) (Metadata, error) {
	root, err := msg.RootPtr()
	return Metadata{root.Struct()}, err
}

func (s Metadata) String() string {
	str, _ := text.Marshal(0x84eb980ee3c7d21d, s.Struct)
	return str
}

func (s Metadata) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s Metadata) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Metadata) Epoch() uint64 {
	return s.Struct.Uint64(8)
}

func (s Metadata) SetEpoch(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s Metadata) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Metadata) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Metadata) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Metadata) EncrKey() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Metadata) HasEncrKey() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Metadata) SetEncrKey(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Metadata) Shard() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.TextList{List: p.List()}, err
}

func (s Metadata) HasShard() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Metadata) SetShard(v capnp.TextList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewShard sets the shard field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Metadata) NewShard(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Metadata) Previous() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Metadata) HasPrevious() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Metadata) SetPrevious(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s Metadata) Next() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return []byte(p.Data()), err
}

func (s Metadata) HasNext() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Metadata) SetNext(v []byte) error {
	return s.Struct.SetData(4, v)
}

func (s Metadata) ConfigPtr() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return []byte(p.Data()), err
}

func (s Metadata) HasConfigPtr() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s Metadata) SetConfigPtr(v []byte) error {
	return s.Struct.SetData(5, v)
}

// Metadata_List is a list of Metadata.
type Metadata_List struct{ capnp.List }

// NewMetadata creates a new list of Metadata.
func NewMetadata_List(s *capnp.Segment, sz int32) (Metadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 6}, sz)
	return Metadata_List{l}, err
}

func (s Metadata_List) At(i int) Metadata { return Metadata{s.List.Struct(i)} }

func (s Metadata_List) Set(i int, v Metadata) error { return s.List.SetStruct(i, v.Struct) }

// Metadata_Promise is a wrapper for a Metadata promised by a client call.
type Metadata_Promise struct{ *capnp.Pipeline }

func (p Metadata_Promise) Struct() (Metadata, error) {
	s, err := p.Pipeline.Struct()
	return Metadata{s}, err
}

const schema_f4533cbae6e08506 = "x\xdaD\xcdMk\x13Q\x14\xc6\xf1\xe79w^\x08" +
	"\xe4\xc5\x8b\x17w\x12q)\xa8\xc4\xa5\x08\x8aKE\xc8" +
	"M>\xc10\xb9\x9a \x99\x0c3\xa3\xa8\x1b7\xfa\x1d" +
	"\xfc,n\xb2\x92l\x14Li!\x85\x14RZ\xba\xe9" +
	"6\x85P(S\x862tw~\x7f\xce\xe1\xdc\x99\xbf" +
	"\x92\x9e?'`\x8d\x1f\x94\xf7\xf7\x16'\xed_\xe7?" +
	"`\xefQ\xca\xe0\xe7\xe6\xec\xf7\x8b\xe1\x16~\x10\x02\xfa" +
	"\xcf\xa5^\x86@\xef\xdf\x82x\\\xe6\xf1\xd8M\xa3\xa7" +
	"SqE4\x8a\x8a\xe8I\x1c\xa5I\xfa\xfc\x9d{y" +
	"\xe3>i\x1f(\x0f\xf0\x08\xe8\xe5#\xc0\xfeU\xb4+" +
	"\xa1&\x0d\xabx\xf0\x0c\xb0\xff\x15\xedZH1\x14@" +
	"\x1f>\x04\xec\xbe\xa2\xdd\x08\xb5\xa2\xa1\x02\xf4\xd1k\xc0" +
	"\xae\x14\xed\xa9P{b\xe8\x01\xfa\xb8\xba^+\xda\x9d" +
	"P\xfb\xca\xd0\x07\xf4\xc5\x1b\xc0n\x15\x07\x14\xea\xc03" +
	"\x0c\x00}U=\xdf)\x0e\xbd\xaa\x86\xbea\x08\xdc%" +
	"\x07\xc0\x80\x8a\xc3&\x85\x9d|\xf2\xcd\xb1\x01a\x03\xec" +
	"\xbat\x16\x8fk\x85\x1f\xddW\xb6 l\x81\xdf]\x12" +
	"goo\xdd\xcd\xc7Q6b\x1b\xec+\xb2\x09\xa9\xc6" +
	"2\xcd\xdc\xe7\xc9\xecS\x0e\xa0^\xec$\xeeKQ\xa3" +
	"\x8cg\xc9\xfb\xc9\x87~\x01fu\xbb\x0e\x00\x00\xff\xff" +
	"\xc0hQ\x07"

func init() {
	schemas.Register(schema_f4533cbae6e08506,
		0x84eb980ee3c7d21d)
}
