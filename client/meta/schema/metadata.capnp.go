// Code generated by capnpc-go. DO NOT EDIT.

package schema

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Metadata struct{ capnp.Struct }

// Metadata_TypeID is the unique identifier for the type Metadata.
const Metadata_TypeID = 0x84eb980ee3c7d21d

func NewMetadata(s *capnp.Segment) (Metadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return Metadata{st}, err
}

func NewRootMetadata(s *capnp.Segment) (Metadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return Metadata{st}, err
}

func ReadRootMetadata(msg *capnp.Message) (Metadata, error) {
	root, err := msg.RootPtr()
	return Metadata{root.Struct()}, err
}

func (s Metadata) String() string {
	str, _ := text.Marshal(0x84eb980ee3c7d21d, s.Struct)
	return str
}

func (s Metadata) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s Metadata) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Metadata) Epoch() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Metadata) SetEpoch(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s Metadata) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Metadata) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Metadata) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Metadata) Chunks() (Metadata_Chunk_List, error) {
	p, err := s.Struct.Ptr(1)
	return Metadata_Chunk_List{List: p.List()}, err
}

func (s Metadata) HasChunks() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Metadata) SetChunks(v Metadata_Chunk_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewChunks sets the chunks field to a newly
// allocated Metadata_Chunk_List, preferring placement in s's segment.
func (s Metadata) NewChunks(n int32) (Metadata_Chunk_List, error) {
	l, err := NewMetadata_Chunk_List(s.Struct.Segment(), n)
	if err != nil {
		return Metadata_Chunk_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Metadata) Previous() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Metadata) HasPrevious() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Metadata) SetPrevious(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s Metadata) Next() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Metadata) HasNext() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Metadata) SetNext(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s Metadata) ConfigPtr() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return []byte(p.Data()), err
}

func (s Metadata) HasConfigPtr() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Metadata) SetConfigPtr(v []byte) error {
	return s.Struct.SetData(4, v)
}

// Metadata_List is a list of Metadata.
type Metadata_List struct{ capnp.List }

// NewMetadata creates a new list of Metadata.
func NewMetadata_List(s *capnp.Segment, sz int32) (Metadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5}, sz)
	return Metadata_List{l}, err
}

func (s Metadata_List) At(i int) Metadata { return Metadata{s.List.Struct(i)} }

func (s Metadata_List) Set(i int, v Metadata) error { return s.List.SetStruct(i, v.Struct) }

func (s Metadata_List) String() string {
	str, _ := text.MarshalList(0x84eb980ee3c7d21d, s.List)
	return str
}

// Metadata_Promise is a wrapper for a Metadata promised by a client call.
type Metadata_Promise struct{ *capnp.Pipeline }

func (p Metadata_Promise) Struct() (Metadata, error) {
	s, err := p.Pipeline.Struct()
	return Metadata{s}, err
}

type Metadata_Chunk struct{ capnp.Struct }

// Metadata_Chunk_TypeID is the unique identifier for the type Metadata_Chunk.
const Metadata_Chunk_TypeID = 0x8215e3820528ef57

func NewMetadata_Chunk(s *capnp.Segment) (Metadata_Chunk, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Metadata_Chunk{st}, err
}

func NewRootMetadata_Chunk(s *capnp.Segment) (Metadata_Chunk, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Metadata_Chunk{st}, err
}

func ReadRootMetadata_Chunk(msg *capnp.Message) (Metadata_Chunk, error) {
	root, err := msg.RootPtr()
	return Metadata_Chunk{root.Struct()}, err
}

func (s Metadata_Chunk) String() string {
	str, _ := text.Marshal(0x8215e3820528ef57, s.Struct)
	return str
}

func (s Metadata_Chunk) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Metadata_Chunk) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Metadata_Chunk) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Metadata_Chunk) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s Metadata_Chunk) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Metadata_Chunk) Shards() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s Metadata_Chunk) HasShards() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Metadata_Chunk) SetShards(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewShards sets the shards field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Metadata_Chunk) NewShards(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Metadata_Chunk_List is a list of Metadata_Chunk.
type Metadata_Chunk_List struct{ capnp.List }

// NewMetadata_Chunk creates a new list of Metadata_Chunk.
func NewMetadata_Chunk_List(s *capnp.Segment, sz int32) (Metadata_Chunk_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Metadata_Chunk_List{l}, err
}

func (s Metadata_Chunk_List) At(i int) Metadata_Chunk { return Metadata_Chunk{s.List.Struct(i)} }

func (s Metadata_Chunk_List) Set(i int, v Metadata_Chunk) error { return s.List.SetStruct(i, v.Struct) }

func (s Metadata_Chunk_List) String() string {
	str, _ := text.MarshalList(0x8215e3820528ef57, s.List)
	return str
}

// Metadata_Chunk_Promise is a wrapper for a Metadata_Chunk promised by a client call.
type Metadata_Chunk_Promise struct{ *capnp.Pipeline }

func (p Metadata_Chunk_Promise) Struct() (Metadata_Chunk, error) {
	s, err := p.Pipeline.Struct()
	return Metadata_Chunk{s}, err
}

const schema_f4533cbae6e08506 = "x\xda\\\x90\xcfk\x13Q\x14\x85\xcf\xb9w^B\xa1" +
	"\xbf\x1e\x19\xad\x0b%\xe0J\x0a*\xad\xbb\"\xa4P\x05" +
	"\x15\x0b\xb9\xbap=LF\x13J\x93\x90IE]\x16" +
	"]\xbb\xf5\x1fp\xad\x82\x82\x95\x0a\x0a\x82{Q\xe8F" +
	"\x88T\xdc(\x88 .\x04\x19y\x96\xa4\xa6\xbbw\xce" +
	"[\xdc\xef|\xb3\xbf\x96e\xc1\xcd\x09`G\\\xa9\xb8" +
	"\xf6\xfd\x84\xdb\xdc=\xb4\x09\xab\x92\xc5\xb1wow\xa7" +
	"\x1f|\xbd\x0b'e`\xe1\xc7<+d\x19\xf0\x7f\x1e" +
	"\xe1\xbf_;L)J\xf7\x06_^\x9c\xbd\xfa\x13\xce" +
	"\x95\x81\xcaC\xfe\xae<\xe1\x1cpf\x8b\xf7\x89\x93E" +
	"\x9e6\xb3\xf5\xe4\xf4\xbaf\xfd\xa4\x91\xf4\x93Si\xd2" +
	"mw\x97V\x87qe\xa6\xb9\xd1^\xab\x936\xa9\x11" +
	"\x10\x11\xf0\xe7\x8f\x03\xb6\xac\xb4\xcbB2f\xe8.\xce" +
	"\x03vNiu\xa1\x17\xc6\x14\xc0\xaf.\x01vAi" +
	"\x0day-\xbb\xcd)\x08\xa7\xc0\x99\xbcu'\xe3\x04" +
	"\x84\x13`-o&\xbdF\xcei\xb0\xae\xe4$$<" +
	"G`r\x10\xac\xb6\x97-\"\xf7\xbdx.VW\x02" +
	"\xa9\x1d\x1da>\x0bH\x8f\x95\xb6-\xf4C\xce\xadE" +
	"\xc0\x9e*\xed\x95\x90\xb2\x87\xf92\xecy\xae\xb47B" +
	"\xaf\x8c\xa9\x80\x7f\x1d\xd8\xb7\x95\xb6#\xf4\x91\xc4\x8c\x00" +
	"\xff\xe1\x12`\xef\x956\x10z\xa71\x1d\xe0?\x86;" +
	";J\xfb,\xf4\xa5(f\x09\xf0\x9f\xae\x006P\xda" +
	"7\x19\x9f[\xcd\xba\x9d\xb4I\x07\xa1\xc3\x98\x95Z\x1a" +
	"\x06\x8cD\xcc\xee\xaf\x03\xff)\xe9\xf6\xb2\x9b\xad\xceF" +
	"\x0e`d\xb2\x9d\xdd\xea\x0fC\x91v\xda\xd7[7\xea" +
	"}\xb07\xec\xfe\x06\x00\x00\xff\xff\xfd\xbc\x80\x9d"

func init() {
	schemas.Register(schema_f4533cbae6e08506,
		0x8215e3820528ef57,
		0x84eb980ee3c7d21d)
}
